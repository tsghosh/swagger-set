
{
  "swagger": "2.0",
  "info": {
    "description": "Swagger Service Definition for GTC D-TCU SF Notification API",
    "version": "1.0.0",
    "title": "GTC D-TCU SF Notification API Swagger"
  },
  "host": "localhost:8090",
  "schemes": [
    "http"
  ],
  "basePath": "",
  "parameters": {
    "HeaderIdVin": {
      "name": "X-Vin",
      "in": "header",
      "description": "VIN",
      "type": "string",
      "maxLength": 20,
      "required": false,
      "example": "12345678901234567890"
    },
    "HeaderIdEventTime": {
      "name": "X-Event-Time",
      "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
      "type": "string",
      "in": "header",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
      "required": true,
      "example": "2018-03-01T09:00:00+00:00"
    },
    "HeaderIdOneTimeUuid": {
      "name": "X-One-Time-Uuid",
      "description": "One Time UUID (UUID RFC4122 Version 4)",
      "type": "string",
      "in": "header",
      "minLength": 36,
      "maxLength": 36,
      "required": true,
      "example": "94d080e7-822a-4b48-9aa0-b2b8221b1cfe"
    },
    "HeaderIdContentTypeJson": {
      "name": "Content-Type",
      "type": "string",
      "enum": [
        "application/json"
      ],
      "in": "header",
      "required": true,
      "example": "application/json"
    },
    "HeaderIdContentTypeOctetStream": {
      "name": "Content-Type",
      "type": "string",
      "enum": [
        "application/octet-stream"
      ],
      "in": "header",
      "required": true,
      "example": "application/octet-stream"
    },
    "HeaderIdApiKey": {
      "name": "X-API-Key",
      "description": "Key to give authorization to use the API",
      "type": "string",
      "in": "header",
      "required": true,
      "example": "aaa"
    },
    "HeaderIdGTCExternalSystemID": {
      "name": "X-Gtc-External-System-Id",
      "description": "ID of the system notifying the result",
      "type": "string",
      "in": "header",
      "required": true,
      "example": "123"
    },
    "HeaderIdLanguageCode": {
      "name": "X-Language-Code",
      "in": "header",
      "description": "In the case of a call from the INJ server or other JPN server, to set “ja”. (RFC3066 formatted)",
      "required": true,
      "example": "ja",
      "type": "string",
      "maxLength": 7
    },
    "HeaderIdNotificationFeature": {
      "name": "X-Notification-Feature",
      "in": "header",
      "description": "",
      "required": true,
      "example": "tcu-sim-info",
      "type": "string"
    },
    "HeaderIdEventStatus": {
      "name": "X-Event-Status",
      "in": "header",
      "description": "",
      "required": true,
      "example": "received",
      "type": "string"
    },
    "HeaderIdProductOwnId": {
      "name": "X-Product-Own-Id",
      "in": "header",
      "description": "",
      "required": true,
      "example": "1234567890123456",
      "type": "number",
      "minLength": 16,
      "maxLength": 16
    },
    "HeaderIdNotificationTime": {
      "name": "X-Notification-Time",
      "description": "UTC Time, RFC3339 YYYY-MM-DDTHH:MM:SS+00:00 Time when GTC received the event",
      "type": "string",
      "in": "header",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
      "required": true,
      "example": "2018-03-01T09:00:00+00:00"
    },
    "HeaderIdEventId": {
      "name": "X-Event-Id",
      "in": "header",
      "description": "A unique ID that GTC assigns to each event.",
      "required": true,
      "example": "123456789012345678",
      "type": "number",
      "minLength": 18,
      "maxLength": 18
    },
    "HeaderIdNotificationType": {
      "name": "X-Notification-Type",
      "in": "header",
      "description": "",
      "required": true,
      "example": "event",
      "type": "string"
    },
    "PathIdVin": {
      "name": "vin",
      "description": "VIN",
      "type": "string",
      "maxLength": 20,
      "in": "path",
      "required": true,
      "example": "aaa"
    },
    "PathIdproductOwnId": {
      "name": "productOwnId",
      "description": "Product Own Id",
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "in": "path",
      "required": true,
      "example": 123
    },
    "PathIdRequestId": {
      "name": "requestId",
      "description": "Request Id",
      "type": "number",
      "maxLength": 18,
      "minLength": 18,
      "in": "path",
      "required": true,
      "example": 123
    },
    "PathIdGlobalId": {
      "name": "globalId",
      "description": "Global Id",
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "in": "path",
      "required": true,
      "example": 123
    },
    "PathIdEventId": {
      "name": "eventId",
      "description": "A unique ID of each notified event assigned by GTC",
      "type": "number",
      "maxLength": 18,
      "minLength": 18,
      "in": "path",
      "required": true,
      "example": 123456789012345680
    },
    "PathIdDaqId": {
      "name": "daqId",
      "description": "DAQ operation specification ID. 0000~FFFF",
      "type": "string",
      "minLength": 6,
      "maxLength": 6,
      "in": "path",
      "required": true,
      "example": "DF12"
    },
    "QueryIdFromDate": {
      "name": "fromDate",
      "description": "Start of time.(UTC Time, RFC3339)(YYYY-MM-DDTHH:MM:SS+00:00)",
      "in": "query",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
      "example": "2018-03-01T09:00:00+00:00"
    },
    "QueryIdToDate": {
      "name": "toDate",
      "description": "End of time.(UTC Time, RFC3339)(YYYY-MM-DDTHH:MM:SS+00:00)",
      "in": "query",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
      "example": "2018-03-01T09:00:00+00:00"
    },
    "QueryIdMaxCount": {
      "name": "maxCount",
      "description": "Max Count",
      "in": "query",
      "type": "number",
      "minimum": 1,
      "maximum": 50,
      "example": 49
    },
    "QueryIdPage": {
      "name": "page",
      "description": "page",
      "in": "query",
      "type": "number",
      "default": 1,
      "example": 1
    },
    "QueryIdLanguageCode": {
      "name": "languageCode",
      "description": "Language code (RFC3066)",
      "in": "query",
      "type": "string",
      "maxLength": 7,
      "example": "en-AS"
    },
    "QueryIdDataType": {
      "name": "dataType",
      "description": "Type of the data to be obtained",
      "in": "query",
      "type": "number",
      "enmu": [
        1,
        2,
        3,
        4,
        5
      ],
      "default": 2,
      "example": 2
    },
    "QueryIdMaxPointnum": {
      "name": "maxPointnum",
      "description": "Maximum number of points.",
      "in": "query",
      "type": "number",
      "default": 10000,
      "example": 10000
    },
    "FormDataIdGlobalId": {
      "name": "globalId",
      "in": "formData",
      "description": "Global ID",
      "required": true,
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdProductOwnId": {
      "name": "productOwnId",
      "in": "formData",
      "description": "ProductOwnId",
      "required": true,
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdRecordCount": {
      "name": "recordCount",
      "in": "formData",
      "required": false,
      "maxLength": 4,
      "description": "count of the record to be returned",
      "type": "number",
      "example": 100
    },
    "FormDataIdGetNaviSpotListMaxNum": {
      "name": "maxNum",
      "in": "formData",
      "description": "The maximum number to be acquired.</br> Range: 1-400</br> 0: unlimited</br> null: set default value(100) on server side",
      "required": false,
      "example": 100,
      "type": "number",
      "minimum": 0,
      "maximum": 400
    },
    "FormDataIdGetNaviSpotListRequestType": {
      "name": "requestType",
      "in": "formData",
      "description": "Search conditions</br> - 0: globalId</br> - 1: globalId and ProductOwnId (MySpot)</br> - 2: ProductOwnId (Pins)",
      "required": true,
      "example": "1",
      "type": "string",
      "enum": [
        "0",
        "1",
        "2"
      ]
    },
    "FormDataIdGetNaviSpotListNaviSyncFlg": {
      "name": "naviSyncFlg",
      "in": "formData",
      "description": "0: Except naviSyncFlg condition | 1: naviSyncFlg = 1",
      "required": false,
      "example": "1",
      "type": "string",
      "enum": [
        "0",
        "1"
      ]
    },
    "FormDataIdGetNaviSpotListSearchType": {
      "name": "searchType",
      "in": "formData",
      "description": "0: result list contains spot array and category array. | 1: result list contains category array.",
      "required": true,
      "example": "1",
      "type": "string",
      "enum": [
        "0",
        "1"
      ]
    },
    "FormDataIdGetNaviSpotListServiceType": {
      "name": "serviceType",
      "in": "formData",
      "description": "0: My Spot | 1: Pins  (Others: KZ etc)",
      "required": true,
      "type": "string",
      "enum": [
        "0",
        "1"
      ],
      "example": "0"
    },
    "FormDataIdGetNaviSpotListSort": {
      "name": "sort",
      "in": "formData",
      "description": "0: spotId desc | 1: spotId asc | null: default value (0)",
      "required": false,
      "type": "string",
      "enum": [
        "0",
        "1"
      ],
      "example": "0"
    },
    "FormDataIdDeleteNaviSpotSpotId": {
      "name": "spotId",
      "in": "formData",
      "description": "MySpots(Pins) ID to be deleted.If set multiple sets, separated by commas.",
      "required": true,
      "type": "number",
      "minLength": 16,
      "maxLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdDeleteNaviSpotBulkDeleteFlag": {
      "name": "bulkDeleteFlag",
      "in": "formData",
      "description": "0: Normal | 1: Bulk mode | null: Set default value(0) on server side.</br> In the case of bulk mode, run the tying release process with the point in a subsequent batch process.",
      "required": false,
      "type": "string",
      "enum": [
        "0",
        "1"
      ],
      "example": "1"
    },
    "FormDataIdGetVisitedSpotListVisitSpotId": {
      "name": "visitSpotId",
      "in": "formData",
      "required": false,
      "description": "If multiple sets,  separated by commas.</br> If visitSpotId is not set, return the whole point in the range of recordCount.</br> If the visitSpotId is set, output is sorted by a set order of request visitSpotId.",
      "type": "number",
      "minLength": 16,
      "maxLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdGetVisitedSpotListSortType": {
      "name": "sortType",
      "in": "formData",
      "required": true,
      "description": "1: by Visited date | 2: by count of visit | 3: by Distance from current place",
      "type": "string",
      "enum": [
        "1",
        "2",
        "3"
      ],
      "example": "1"
    },
    "FormDataIdGetVisitedSpotListSpotInfoMaskingFlg": {
      "name": "spotInfoMaskingFlg",
      "in": "formData",
      "description": "0:Unmasked | 1:Masked NAVI_SYNC_FLG = 0</br> records will be returned by mask.",
      "required": false,
      "type": "string",
      "enum": [
        "0",
        "1"
      ],
      "default": "1",
      "example": "1"
    },
    "FormDataIdLatitude": {
      "name": "latitude",
      "in": "formData",
      "required": false,
      "description": "latitude of the current (center of the search) place",
      "type": "number",
      "example": 35.7897958
    },
    "FormDataIdLongitude": {
      "name": "longitude",
      "in": "formData",
      "required": false,
      "description": "longitude of the current (center of the search) place",
      "type": "number",
      "example": 139.607271
    },
    "FormDataIdRecordVisitHistoryFlag": {
      "name": "recordVisitHistoryFlag",
      "in": "formData",
      "required": true,
      "description": "0: Off(Not record) | 1: On(Record)",
      "type": "number",
      "enum": [
        "0",
        "1"
      ],
      "example": "1"
    },
    "FormDataIdCategoryId": {
      "name": "categoryId",
      "in": "formData",
      "description": "Categories(Tags) ID to be deleted.If set multiple sets, separated by commas.",
      "required": true,
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdDeleteVisitedSpotVisitSpotId": {
      "name": "visitSpotId",
      "in": "formData",
      "required": false,
      "description": "visitSpotId is Mandatory if  deleteMode = 1</br> visitSpotId must be empty if deleteMode = 9",
      "type": "number",
      "minLength": 16,
      "maxLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdDeleteVisitedSpotDeleteMode": {
      "name": "deleteMode",
      "in": "formData",
      "required": false,
      "description": "1: spot specified | 9: delete all spots",
      "type": "number",
      "enum": [
        1,
        9
      ],
      "example": 1
    },
    "FormDataIdMaintenanceUserId": {
      "name": "maintenanceUserId",
      "in": "formData",
      "required": true,
      "description": "specified by GTC",
      "type": "string",
      "maxLength": 20,
      "example": "aaa"
    },
    "FormDataIdImageFileName": {
      "name": "imageFileName",
      "in": "formData",
      "required": true,
      "description": "Image File Name",
      "type": "string",
      "maxLength": 256,
      "example": "aaa"
    },
    "FormDataIdImageFileId": {
      "name": "imageFileId",
      "in": "formData",
      "required": false,
      "description": "When updating.",
      "type": "number",
      "maxLength": 16,
      "minLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdImageData": {
      "name": "imageData",
      "in": "formData",
      "required": true,
      "description": "Image File(“jpeg” or “png”,500KB)",
      "type": "string",
      "format": "binary"
    },
    "FormDataIdContentId": {
      "name": "contentId",
      "in": "formData",
      "required": true,
      "description": "Content Id",
      "type": "number",
      "minLength": 16,
      "maxLength": 16,
      "example": 1234567890123456
    },
    "FormDataIdEndFileFlag": {
      "name": "endFileFlag",
      "in": "formData",
      "required": true,
      "description": "0: not end file | 1: end file</br> When devided file upload, then set “1” to the end of request.",
      "type": "string",
      "enum": [
        "0",
        "1"
      ],
      "example": "1"
    },
    "FormDataIdUploadFileName": {
      "name": "uploadFileName",
      "in": "formData",
      "required": true,
      "description": "Unziped CSV file is same name except the extension.",
      "type": "string",
      "maxLength": 256,
      "pattern": "^[a-zA-Z0-9][\\w]+\\.zip$",
      "example": "aaa.zip"
    },
    "FormDataIdUploadData": {
      "name": "uploadData",
      "in": "formData",
      "required": true,
      "description": "CSV compressed by ZIP.(To about 100,000 lines CSV)",
      "type": "string",
      "format": "binary"
    }
  },
  "securityDefinitions": {
    "cookieAuth": {
      "type": "apiKey",
      "name": "HICSESSIONKEY",
      "required": true,
      "in": "header",
      "example": "0000RC8ReWbY-X-sx9A0Qb4XHXY:-1"
    }
  },
  "paths": {
    "/XXXXX/tcu-sim-info": {
      "post": {
        "summary": "Notify TCU/SIM Replacement",
        "operationId": "SFAPI_1214",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/HeaderIdNotificationFeature"
          },
          {
            "$ref": "#/parameters/HeaderIdEventStatus"
          },
          {
            "$ref": "#/parameters/HeaderIdVin"
          },
          {
            "$ref": "#/parameters/HeaderIdProductOwnId"
          },
          {
            "$ref": "#/parameters/HeaderIdNotificationTime"
          },
          {
            "$ref": "#/parameters/HeaderIdEventId"
          },
          {
            "$ref": "#/parameters/HeaderIdNotificationType"
          },
          {
            "$ref": "#/parameters/HeaderIdOneTimeUuid"
          },
          {
            "name": "requestBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TcuInformationEventResponse"
            },
            "description": "Request Body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "headers": {
              "X-Event-Id": {
                "description": "The same X-Event-Id that was specified in the Request is returned.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18
              },
              "X-One-Time-Uuid": {
                "description": "One Time UUID (UUID RFC4122 Version 4) (Set value of request)",
                "type": "string",
                "minLength": 36,
                "maxLength": 36
              }
            }
          },
          "400": {
            "description": "Error management",
            "schema": {
              "$ref": "#/definitions/CommonErrorResponse"
            },
            "headers": {
              "X-One-Time-Uuid": {
                "description": "One Time UUID (UUID RFC4122 Version 4) (Set value of request)",
                "type": "string",
                "minLength": 36,
                "maxLength": 36
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommonTcuInformation": {
      "description": "Tcu Information",
      "type": "object",
      "required": [
        "tcuInformation"
      ],
      "properties": {
        "tcuInformation": {
          "type": "object",
          "required": [
            "imei",
            "iccid",
            "euiccid",
            "imsi"
          ],
          "properties": {
            "imei": {
              "description": "IMEI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            },
            "iccid": {
              "description": "ICCID",
              "type": "string",
              "maxLength": 20,
              "pattern": "^\\d{1,20}$",
              "example": 12345678901234567000
            },
            "euiccid": {
              "description": "eUICCID",
              "type": "string",
              "maxLength": 32,
              "pattern": "^\\d{1,32}$",
              "example": 1.2345678901234567e+31
            },
            "imsi": {
              "description": "IMSI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            }
          }
        }
      }
    },
    "TcuInformationEventNotificationRequest": {
      "description": "Tcu Information Event Notification - Request Body",
      "type": "object",
      "required": [
        "vin",
        "tcuInformation"
      ],
      "properties": {
        "vin": {
          "description": "VIN",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "tcuInformation": {
          "type": "object",
          "required": [
            "modelYear",
            "msisdn",
            "imei",
            "iccid",
            "imsi",
            "tcuSwVersion",
            "tcuSerialNo",
            "tcuManufacturerName",
            "destinationCodes"
          ],
          "properties": {
            "modelYear": {
              "description": "- 2016: 2016 model year</br> - 2020: 2020 model year",
              "type": "string",
              "enum": [
                "2016",
                "2020"
              ],
              "example": "2020"
            },
            "msisdn": {
              "description": "MSISDN",
              "type": "string",
              "maxLength": 15,
              "pattern": "^\\d{1,15}$",
              "example": 123456789012345
            },
            "imei": {
              "description": "IMEI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            },
            "iccid": {
              "description": "ICCID",
              "type": "string",
              "maxLength": 20,
              "pattern": "^\\d{1,20}$",
              "example": 12345678901234567000
            },
            "euiccid": {
              "description": "eUICCID",
              "type": "string",
              "maxLength": 32,
              "pattern": "^\\d{1,32}$",
              "example": 1.2345678901234567e+31
            },
            "imsi": {
              "description": "IMSI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            },
            "tcuSwVersion": {
              "description": "Software version of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "tcuSerialNo": {
              "description": "Serial number of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "tcuManufacturerName": {
              "description": "Manufacture name of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "destinationCodes": {
              "description": "List of 2 digit destination code (ex. KA:USA、KC:CAN、KJ:JPN).",
              "type": "string",
              "maxLength": 128,
              "example": "KA,KC"
            }
          }
        }
      }
    },
    "TcuInformationEventResponse": {
      "description": "Tcu Information Event - Response Body",
      "type": "object",
      "required": [
        "tcuInformation"
      ],
      "properties": {
        "tcuInformation": {
          "type": "object",
          "required": [
            "modelYear",
            "msisdn",
            "imei",
            "iccid",
            "imsi",
            "tcuSwVersion",
            "tcuSerialNo",
            "tcuManufacturerName",
            "destinationCodes"
          ],
          "properties": {
            "modelYear": {
              "description": "- 2016: 2016 model year</br> - 2020: 2020 model year",
              "type": "string",
              "enum": [
                "2016",
                "2020"
              ],
              "example": "2020"
            },
            "msisdn": {
              "description": "MSISDN",
              "type": "string",
              "maxLength": 15,
              "pattern": "^\\d{1,15}$",
              "example": 123456789012345
            },
            "imei": {
              "description": "IMEI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            },
            "iccid": {
              "description": "ICCID",
              "type": "string",
              "maxLength": 20,
              "pattern": "^\\d{1,20}$",
              "example": 12345678901234567000
            },
            "euiccid": {
              "description": "eUICCID",
              "type": "string",
              "maxLength": 32,
              "pattern": "^\\d{1,32}$",
              "example": 1.2345678901234567e+31
            },
            "imsi": {
              "description": "IMSI",
              "type": "string",
              "maxLength": 16,
              "pattern": "^\\d{1,16}$",
              "example": 1234567890123456
            },
            "tcuSwVersion": {
              "description": "Software version of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "tcuSerialNo": {
              "description": "Serial number of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "tcuManufacturerName": {
              "description": "Manufacture name of TCU.",
              "type": "string",
              "maxLength": 128,
              "example": "AAAA"
            },
            "destinationCodes": {
              "description": "List of 2 digit destination code (ex. KA:USA、KC:CAN、KJ:JPN).",
              "type": "string",
              "maxLength": 128,
              "example": "KA,KC"
            }
          }
        }
      }
    },
    "TcusiminfoEventHistoryResponse": {
      "description": "tcu-sim-info event history - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "received"
                ],
                "example": "received"
              },
              "detail": {
                "$ref": "#/definitions/TcuInformationEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "ProvisioningAsyncRequest": {
      "description": "Provisioning Async Request - Request Body",
      "type": "object",
      "required": [
        "provisioningConfig",
        "provisioningInformation"
      ],
      "properties": {
        "vin": {
          "description": "Either vin or productOwnId is Mandatory.Specify the one you set when Request",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "productOwnId": {
          "description": "Either vin or productOwnId is Mandatory.Specify the one you set when Request",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        },
        "shoulderTapTry": {
          "description": "Shoulder tap Set whether or not to perform a shoulder tap with a possible vehicle.</br> - Setting this option for vehicles that do not support shoulder taps does not change anything.</br> - The default is on.",
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "default": "on",
          "example": "on"
        },
        "provisioningConfig": {
          "description": "Following from MY16",
          "type": "string",
          "example": "abc"
        },
        "provisioningInformation": {
          "description": "Provisioning Information",
          "type": "object",
          "properties": {
            "tcu": {
              "description": "At least, one of tcu or ivi is mandatory",
              "type": "object",
              "required": [
                "version",
                "servicePackage"
              ],
              "properties": {
                "version": {
                  "description": "Parameters to distinguish mandatory parameters by version in the future.</br> The currently supported version is only 2.0 (fixed)",
                  "type": "string",
                  "maxLength": 20,
                  "example": "2.0"
                },
                "servicePackage": {
                  "description": "Service package.",
                  "type": "object",
                  "required": [
                    "name",
                    "categories",
                    "services"
                  ],
                  "properties": {
                    "name": {
                      "description": "Service package name to display in DA.",
                      "type": "string",
                      "maxLength": 200,
                      "example": "D-TCU Basic Service Package"
                    },
                    "categories": {
                      "description": "Service categories.",
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "name",
                          "status",
                          "expire"
                        ],
                        "properties": {
                          "id": {
                            "description": "Service category ID.",
                            "type": "string",
                            "example": "1",
                            "maxLength": 9
                          },
                          "name": {
                            "description": "Service category name to send to DA.",
                            "type": "string",
                            "example": "AcuraLink Standard",
                            "maxLength": 200
                          },
                          "status": {
                            "description": "Service category offer state.<br/> - true : Services are provided.<br/> - false : Services are not provided.",
                            "type": "boolean",
                            "enum": [
                              true,
                              false
                            ],
                            "example": true
                          },
                          "expire": {
                            "description": "Service category expiration date. (UTC Time, RFC3339) (YYYY-MM-DDTHH:MM:SS+00:00)<br/> Default value: 1900-01-01T00:00:00+00:00 (if Services are not provided)",
                            "type": "string",
                            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                            "default": "1900-01-01T00:00:00+00:00",
                            "example": "2017-06-30T12:50:00+00:00"
                          }
                        }
                      }
                    },
                    "services": {
                      "description": "Service contents.",
                      "type": "array",
                      "maxItems": 5,
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "category",
                          "name",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "description": "Service id. - 7 : Auto-Crash Notification (acn)<br/> - 8 : Emergency Call (emergency-call)<br/> - 9 : Roadside Assistance (roadside-call)<br/> - 14 : Security Alarm (security-alert)<br/> - 20 : Information Call (information-call)",
                            "type": "string",
                            "example": "7",
                            "enum": [
                              "7",
                              "8",
                              "9",
                              "14",
                              "20"
                            ]
                          },
                          "category": {
                            "description": "Unit category of each provided service.<br/> - tcu : Provided by TCU (fixed)",
                            "type": "string",
                            "example": "tcu",
                            "enum": [
                              "tcu"
                            ]
                          },
                          "name": {
                            "description": "Service name",
                            "type": "string",
                            "maxLength": 200,
                            "example": "Auto-Crash Notification"
                          },
                          "status": {
                            "description": "Service offer state.<br/> - true : Service is available.<br/> - false : Service is not available.",
                            "type": "boolean",
                            "enum": [
                              true,
                              false
                            ],
                            "example": true
                          },
                          "operator": {
                            "description": "Operator phone number list. Up to 2 elements.<br/> Mandatory when operator phone number is required.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "object",
                              "required": [
                                "tel"
                              ],
                              "properties": {
                                "tel": {
                                  "description": "Operator phone number.",
                                  "type": "string",
                                  "maxLength": 15,
                                  "example": "8888888888"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "serviceCallInfo": {
                  "type": "object",
                  "description": "Provisioning request message.<br/> Mandatory when message is required.",
                  "required": [
                    "categories"
                  ],
                  "properties": {
                    "categories": {
                      "description": "Service categories.",
                      "type": "array",
                      "maxItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "parameters"
                        ],
                        "properties": {
                          "name": {
                            "description": "Service categories to display in DA. Must be common between all serviceCallInfo parameters.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "Services"
                          },
                          "parameters": {
                            "description": "One Provisioning Request message may have from 1 to 8 service parameters.",
                            "maxItems": 8,
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Service name to display in DA. (ex. Place, Address, Concierge, RoadsideAssistance)",
                                  "type": "string",
                                  "maxLength": 40,
                                  "example": "Place"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "ivi": {
              "description": "At least, one of tcu or ivi is mandatory",
              "type": "object",
              "required": [
                "version",
                "httpComm",
                "servicingDealer",
                "servicePackage",
                "ivrMenu",
                "roadsideAssistance",
                "hmiLog"
              ],
              "properties": {
                "version": {
                  "description": "Parameters to distinguish mandatory parameters by version in the future.</br> The currently supported version is only 2.0 (fixed)",
                  "type": "string",
                  "maxLength": 20,
                  "example": "2.0"
                },
                "brand": {
                  "description": "Brand",
                  "type": "string",
                  "maxLength": 20,
                  "example": "aaa"
                },
                "httpComm": {
                  "description": "Brand",
                  "type": "string",
                  "maxLength": 3,
                  "enum": [
                    "on",
                    "off"
                  ],
                  "example": "on"
                },
                "sellingDealer": {
                  "description": "Selling Dealer",
                  "type": "object",
                  "required": [
                    "name",
                    "dealerGroupCode",
                    "dealerCode",
                    "address",
                    "tel",
                    "nameSalesman",
                    "telSalesman",
                    "ossFlag",
                    "zone",
                    "district"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string",
                      "maxLength": 1280,
                      "example": "aaa"
                    },
                    "dealerGroupCode": {
                      "description": "Dealer Group Code",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "dealerCode": {
                      "description": "Dealer Code",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "address": {
                      "description": "Address",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "aaa"
                    },
                    "tel": {
                      "description": "Tel",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "nameSalesman": {
                      "description": "Name of Salesman",
                      "type": "string",
                      "maxLength": 200,
                      "example": "aaa"
                    },
                    "telSalesman": {
                      "description": "Tel of Salesman",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "ossFlag": {
                      "description": "OSS Flag",
                      "type": "string",
                      "maxLength": 32,
                      "example": "aaa"
                    },
                    "zone": {
                      "description": "Zone",
                      "type": "string",
                      "maxLength": 400,
                      "example": "aaa"
                    },
                    "district": {
                      "description": "District",
                      "type": "string",
                      "maxLength": 400,
                      "example": "aaa"
                    }
                  }
                },
                "servicingDealer": {
                  "description": "Servicing Dealer",
                  "type": "object",
                  "required": [
                    "name",
                    "dealerGroupCode",
                    "dealerCode",
                    "address",
                    "tel",
                    "nameSalesman",
                    "telSalesman",
                    "ossFlag",
                    "zone",
                    "district"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string",
                      "maxLength": 1280,
                      "example": "aaa"
                    },
                    "dealerGroupCode": {
                      "description": "Dealer Group Code",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "dealerCode": {
                      "description": "Dealer Code",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "address": {
                      "description": "Address",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "aaa"
                    },
                    "tel": {
                      "description": "Tel",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "nameSalesman": {
                      "description": "Name of Salesman",
                      "type": "string",
                      "maxLength": 200,
                      "example": "aaa"
                    },
                    "telSalesman": {
                      "description": "Tel of Salesman",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "ossFlag": {
                      "description": "OSS Flag",
                      "type": "string",
                      "maxLength": 32,
                      "example": "aaa"
                    },
                    "zone": {
                      "description": "Zone",
                      "type": "string",
                      "maxLength": 400,
                      "example": "aaa"
                    },
                    "district": {
                      "description": "District",
                      "type": "string",
                      "maxLength": 400,
                      "example": "aaa"
                    }
                  }
                },
                "servicePackage": {
                  "description": "Service package.",
                  "type": "object",
                  "required": [
                    "name",
                    "serviceCategory"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string",
                      "maxLength": 200,
                      "example": "D-TCU Basic Service Package"
                    },
                    "serviceCategory": {
                      "description": "Length of array: 1-N",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "name",
                          "status",
                          "expires",
                          "service"
                        ],
                        "properties": {
                          "id": {
                            "description": "Service id.",
                            "type": "number",
                            "maxLength": 9,
                            "example": 123
                          },
                          "name": {
                            "description": "Name",
                            "type": "string",
                            "maxLength": 200,
                            "example": "abc"
                          },
                          "status": {
                            "description": "Service category offer state",
                            "type": "string",
                            "maxLength": 3,
                            "enum": [
                              "on",
                              "off"
                            ],
                            "example": "on"
                          },
                          "expires": {
                            "description": "Date format is free.",
                            "type": "string",
                            "maxLength": 10,
                            "example": "2017-06-30"
                          },
                          "service": {
                            "description": "Length of array: 1-N",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "category",
                                "name",
                                "status",
                                "expires",
                                "link"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Service id.",
                                  "type": "number",
                                  "maxLength": 9,
                                  "example": 123
                                },
                                "category": {
                                  "description": "Category",
                                  "type": "string",
                                  "maxLength": 200,
                                  "example": "aaa"
                                },
                                "name": {
                                  "description": "Name",
                                  "type": "string",
                                  "maxLength": 200,
                                  "example": "aaa"
                                },
                                "status": {
                                  "description": "Service category offer state",
                                  "type": "string",
                                  "maxLength": 3,
                                  "enum": [
                                    "on",
                                    "off"
                                  ],
                                  "example": "on"
                                },
                                "expires": {
                                  "description": "Date format is free.",
                                  "type": "string",
                                  "maxLength": 17,
                                  "example": "2017-06-30"
                                },
                                "link": {
                                  "description": "Link",
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "description": "Value",
                                      "type": "string",
                                      "maxLength": 2000,
                                      "example": "aaa"
                                    }
                                  }
                                },
                                "communicationNumbers": {
                                  "description": "Length of array: 1-N",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "id",
                                      "number"
                                    ],
                                    "properties": {
                                      "type": {
                                        "description": "Type",
                                        "type": "string",
                                        "maxLength": 32,
                                        "enum": [
                                          "sms",
                                          "dtmf",
                                          "operator"
                                        ],
                                        "example": "operator"
                                      },
                                      "id": {
                                        "description": "ID",
                                        "type": "number",
                                        "maxLength": 9,
                                        "example": 123
                                      },
                                      "number": {
                                        "description": "ID",
                                        "type": "string",
                                        "maxLength": 128,
                                        "example": "123"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "ivrMenu": {
                  "description": "Ivr Menu",
                  "type": "object",
                  "properties": {
                    "title": {
                      "description": "Title",
                      "type": "string",
                      "maxLength": 200,
                      "example": "aaa"
                    },
                    "menuOption": {
                      "description": "Length of array: 1-N",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "ID",
                            "type": "number",
                            "maxLength": 9,
                            "example": 123
                          },
                          "name": {
                            "description": "Name",
                            "type": "string",
                            "maxLength": 200,
                            "example": "aaa"
                          }
                        }
                      }
                    }
                  }
                },
                "roadsideAssistance": {
                  "description": "Roadside Assistance",
                  "type": "object",
                  "required": [
                    "status",
                    "tel"
                  ],
                  "properties": {
                    "status": {
                      "description": "Status",
                      "type": "string",
                      "maxLength": 3,
                      "enum": [
                        "on",
                        "off"
                      ],
                      "example": "on"
                    },
                    "tel": {
                      "description": "Tel",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    }
                  }
                },
                "optionalInsurance": {
                  "description": "Optional Insurance",
                  "type": "object",
                  "required": [
                    "tel",
                    "text"
                  ],
                  "properties": {
                    "tel": {
                      "description": "Tel",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "text": {
                      "description": "Text",
                      "type": "string",
                      "maxLength": 600,
                      "example": "aaa"
                    },
                    "nameSalesman": {
                      "description": "Name of Salesman",
                      "type": "string",
                      "maxLength": 200,
                      "example": "aaa"
                    },
                    "telSalesman": {
                      "description": "Tel of Salesman",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    }
                  }
                },
                "tcuSetting": {
                  "description": "Tcu Setting",
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "description": "Type",
                      "type": "string",
                      "maxLength": 32,
                      "enum": [
                        "tcu_link",
                        "mo_sms",
                        "white_list_sms",
                        "white_list_voice"
                      ],
                      "example": "tcu_link"
                    },
                    "id": {
                      "description": "ID",
                      "type": "number",
                      "maxLength": 9,
                      "example": 123
                    },
                    "value": {
                      "description": "Value",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "aaa"
                    }
                  }
                },
                "hmiLog": {
                  "description": "hmiLog",
                  "type": "object",
                  "required": [
                    "status",
                    "uploadInterval"
                  ],
                  "properties": {
                    "status": {
                      "description": "Status",
                      "type": "string",
                      "maxLength": 3,
                      "enum": [
                        "on",
                        "off"
                      ],
                      "example": "on"
                    },
                    "uploadInterval": {
                      "description": "Upload Interval",
                      "type": "number",
                      "maxLength": 6,
                      "example": 123
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ProvisioningAsyncRequestResponse": {
      "description": "Provisioning Async Request - Response Body",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name.",
          "type": "string",
          "enum": [
            "provisioning"
          ],
          "example": "provisioning"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "enum": [
            "OK"
          ],
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "number",
          "enum": [
            0
          ],
          "example": 0
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "maxItems": 0,
          "items": {
            "type": "object",
            "example": []
          }
        }
      }
    },
    "ProvisioningStatusResponse": {
      "description": "Provisioning Status - Response Body",
      "type": "object",
      "required": [
        "currentStatus"
      ],
      "properties": {
        "currentStatus": {
          "description": "Returns the result of the current Status",
          "type": "string",
          "enum": [
            "in-progress",
            "inactive"
          ],
          "example": "in-progress"
        },
        "previousStatus": {
          "description": "Returns the result of the previous execution<br/> - Mandatory when currentStatus = inactive",
          "type": "string",
          "enum": [
            "failed",
            "abandoned",
            "completed"
          ],
          "example": "completed"
        }
      }
    },
    "ProvisioningResultResponse": {
      "description": "Provisioning Result - Response Body",
      "type": "object",
      "required": [
        "devices"
      ],
      "properties": {
        "devices": {
          "description": "Devices",
          "type": "array",
          "maxItems": 2,
          "minItems": 2,
          "items": {
            "type": "object",
            "required": [
              "deviceType",
              "status"
            ],
            "properties": {
              "deviceType": {
                "description": "Device Type",
                "type": "string",
                "enum": [
                  "ivi",
                  "tcu"
                ],
                "example": "ivi"
              },
              "status": {
                "description": "Status",
                "type": "string",
                "enum": [
                  "failed",
                  "abandoned",
                  "completed"
                ],
                "example": "completed"
              },
              "statusUpdateTime": {
                "description": "UTC Time, RFC3339.The time when results were notified to GTC",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              }
            }
          }
        }
      }
    },
    "ProvisioningResultHistoryResponse": {
      "description": "Provisioning Result History - Request Body ",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "tcuRequestStatus": {
                "description": "Requst status of TCU.",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "tcuStatusReason": {
                "description": "Status reason of TCU.When tcuRequestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "tcuRequestEndTime": {
                "description": "Request end time of TCU.UTC Time, RFC3339.</br> Time when results were notified to GTC</br> When the status is in-progress, this parameter is not set",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "iviRequestStatus": {
                "description": "Requst status of IVI.",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "iviRequestEndTime": {
                "description": "Request end time of IVI.UTC Time, RFC3339.</br> Time when results were notified to GTC</br> When the status is in-progress, this parameter is not set",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "detail": {
                "$ref": "#/definitions/ProvisioningResultResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RemoteEngineAsyncRequest": {
      "description": "Remote Engine Start (RES) object",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- start: Engine start immediately<br/> - delayStart: Delay engine start<br/> - temporarySetting: Set temporary setting while engine is running<br/> - stop: Stop engine<br/> - extend: Extend engine running time",
          "type": "string",
          "example": "start",
          "enum": [
            "start",
            "delayStart",
            "temporarySetting",
            "stop",
            "extend"
          ]
        },
        "vehicleControl": {
          "description": "Mandatory when command is \"start\" or \"delayStart\" or \"temporarySetting\".",
          "type": "object",
          "properties": {
            "vehicleStartTimer": {
              "description": "Mandatory when command is \"delayStart\".",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Value [1 - 60]",
                  "type": "number",
                  "example": 2,
                  "minimum": 1,
                  "maximum": 60
                },
                "unit": {
                  "description": "Unit",
                  "type": "string",
                  "example": "min",
                  "enum": [
                    "min"
                  ]
                }
              }
            },
            "acSetting": {
              "description": "Mandatory when command is \"start\" or \"delayStart\".</br> First operation is 10 minutes, remaining 10 minutes are activated by extension. (Max 20 minutes)</br> Ignored when the other commands are set.",
              "type": "object",
              "required": [
                "acTempVal",
                "acDefSetting"
              ],
              "properties": {
                "acTempVal": {
                  "description": "Temperature setting.<br/> - 01: Hi<br/> - 02: Lo<br/> - 03: TEMP Mode \"WARM\"<br/> - 04: TEMP Mode \"NORMAL\"<br/> - 05: TEMP Mode \"COOL\"<br/> - 0A～2A: 15.5～31.5[°C] in increments of 0.5°C<br/> - 30～4C: 58～86[°F] in increments of 1°F",
                  "type": "string",
                  "example": "01",
                  "enum": [
                    "01",
                    "02",
                    "03",
                    "04",
                    "05",
                    "0A",
                    "0B",
                    "0C",
                    "0D",
                    "0E",
                    "0F",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "1A",
                    "1B",
                    "1C",
                    "1D",
                    "1E",
                    "1F",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "2A",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "3A",
                    "3B",
                    "3C",
                    "3D",
                    "3E",
                    "3F",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "4A",
                    "4B",
                    "4C"
                  ]
                },
                "acDefSetting": {
                  "description": "Defroster interlocking (ON / OFF) setting by automatic.",
                  "type": "string",
                  "example": "autoOn",
                  "enum": [
                    "autoOn",
                    "autoOff"
                  ]
                }
              }
            },
            "acTemporarySetting": {
              "description": "Mandatory when command is \"temporarySetting\".Ignored when the other commands are set.",
              "type": "object",
              "required": [
                "acDefSetting"
              ],
              "properties": {
                "acDefSetting": {
                  "description": "Defroster interlocking (ON / OFF) setting by manual.",
                  "type": "string",
                  "example": "manualOn",
                  "enum": [
                    "manualOn",
                    "manualOff"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "RemoteEngineResultHistoryResponse": {
      "description": "Remote Engine Result History - Request Body ",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "- start: Engine start immediately</br> - delayStart: Delay engine start</br> - temporarySetting: Set temporary setting while engine is running</br> - stop: Stop engine</br> - extend: Extend engine running time</br> - cancelDelayStart: Cancel delay engine start",
                "type": "string",
                "example": "temporarySetting",
                "enum": [
                  "start",
                  "delayStart",
                  "temporarySetting",
                  "stop",
                  "extend",
                  "cancelDelayStart"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "description": "Detail",
                "type": "object",
                "required": [
                  "ignition",
                  "resultCode",
                  "vehicleControl"
                ],
                "properties": {
                  "ignition": {
                    "$ref": "#/definitions/CommonIgnition"
                  },
                  "resultCode": {
                    "$ref": "#/definitions/CommonRemoteEngineResultCode"
                  },
                  "vehicleControl": {
                    "description": "Vehicle Control",
                    "type": "object",
                    "required": [
                      "cabinTemperature",
                      "vehicleStartStatus",
                      "acStatus"
                    ],
                    "properties": {
                      "cabinTemperature": {
                        "description": "Cabin Temperature",
                        "type": "object",
                        "required": [
                          "value",
                          "unit"
                        ],
                        "properties": {
                          "value": {
                            "description": "-30 to 85 : Inner temperature<br/> 224 : Not determined<br/> 225 : Broken<br/> <br/> Default value : 244",
                            "type": "number",
                            "format": "int32",
                            "minimum": -30,
                            "maximum": 225,
                            "example": 85
                          },
                          "unit": {
                            "description": "- c : Celsius (fixed)",
                            "type": "string",
                            "enum": [
                              "c"
                            ],
                            "example": "c"
                          }
                        }
                      },
                      "vehicleStartStatus": {
                        "description": "Accepted command in order request.<br/> - start : Start engine<br/> - setting : Set temperature after engine start<br/> - temporarySetting : Set temporary setting while engine is running (Ex. defroster by manual)<br/> - stop : Stop engine",
                        "type": "string",
                        "example": "temporarySetting",
                        "enum": [
                          "start",
                          "setting",
                          "temporarySetting",
                          "stop"
                        ]
                      },
                      "vehicleStartEvent": {
                        "description": "Mandatory when vehicleStartStatus is \"start\" or \"setting\" or \"temporarySetting\".<br/> When vehicleStartStatus is \"stop\", this parameter is not set.",
                        "type": "object",
                        "required": [
                          "rStartCounter",
                          "eventTime"
                        ],
                        "properties": {
                          "rStartCounter": {
                            "description": "RES success counter value<br/> *Reset thist counter to 0 when IG-ON.",
                            "type": "number",
                            "format": "int32",
                            "minimum": 0,
                            "maximum": 2,
                            "example": 2
                          },
                          "eventTime": {
                            "description": "TCU monitoring time. (UTC Time, RFC3339)(YYYY-MM-DDTHH:MM:SS+00:00)<br/> When time is unclear is as follows.<br/> 1900-01-01T00:00:00+00:00",
                            "type": "string",
                            "example": "2017-06-30T12:50:00+00:00",
                            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$"
                          }
                        }
                      },
                      "acStatus": {
                        "description": "AC Status",
                        "type": "object",
                        "required": [
                          "acTempVal",
                          "acDefSetting"
                        ],
                        "properties": {
                          "acTempVal": {
                            "description": "Temperature setting.<br/> - 00: Unknown<br/> - 01: Hi<br/> - 02: Lo<br/> - 03: TEMP Mode \"WARM\"<br/> - 04: TEMP Mode \"NORMAL\"<br/> - 05: TEMP Mode \"COOL\"<br/> - 0A~2A: 15.5～31.5[°C] in increments of 0.5°C<br/> - 30=4C: 58～86[°F] in increments of 1°F<br/>\nDefault value : 00",
                            "type": "string",
                            "example": "01",
                            "enum": [
                              "00",
                              "01",
                              "02",
                              "03",
                              "04",
                              "05",
                              "0A",
                              "0B",
                              "0C",
                              "0D",
                              "0E",
                              "0F",
                              "10",
                              "11",
                              "12",
                              "13",
                              "14",
                              "15",
                              "16",
                              "17",
                              "18",
                              "19",
                              "1A",
                              "1B",
                              "1C",
                              "1D",
                              "1E",
                              "1F",
                              "20",
                              "21",
                              "22",
                              "23",
                              "24",
                              "25",
                              "26",
                              "27",
                              "28",
                              "29",
                              "2A",
                              "30",
                              "31",
                              "32",
                              "33",
                              "34",
                              "35",
                              "36",
                              "37",
                              "38",
                              "39",
                              "3A",
                              "3B",
                              "3C",
                              "3D",
                              "3E",
                              "3F",
                              "40",
                              "41",
                              "42",
                              "43",
                              "44",
                              "45",
                              "46",
                              "47",
                              "48",
                              "49",
                              "4A",
                              "4B",
                              "4C"
                            ]
                          },
                          "acDefSetting": {
                            "description": "Defroster interlocking (ON / OFF) setting by automatic.<br/> - autoOn : Turn on the defroster<br/> - autoOff : Turn off the defroster<br/> - unknown : Undetectable<br/> <br/> Default value : unknown",
                            "type": "string",
                            "example": "autoOn",
                            "enum": [
                              "autoOn",
                              "autoOff",
                              "unknown"
                            ]
                          },
                          "acTemporarySetting": {
                            "description": "Mandatory when command is \"temporarySetting\".",
                            "type": "object",
                            "required": [
                              "acDefSetting"
                            ],
                            "properties": {
                              "acDefSetting": {
                                "description": "Defroster interlocking (ON / OFF) setting by manual.<br/> - manualOn : Turn on the defroster<br/> - manualOff : Turn off the defroster<br/> - unknown : Undetectable<br/> <br/> Default value : unknown",
                                "type": "string",
                                "example": "manualOn",
                                "enum": [
                                  "manualOn",
                                  "manualOff",
                                  "unknown"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "ResultRemoteEngineResponse": {
      "description": "Remote Engine Start response",
      "type": "object",
      "properties": {
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        },
        "resultCode": {
          "$ref": "#/definitions/CommonRemoteEngineResultCode"
        },
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "cabinTemperature",
            "vehicleStartStatus",
            "acStatus"
          ],
          "properties": {
            "cabinTemperature": {
              "description": "Cabin Temperature",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "-30 to 85 : Inner temperature<br/> 224 : Not determined<br/> 225 : Broken<br/> <br/> Default value : 244",
                  "type": "number",
                  "format": "int32",
                  "minimum": -30,
                  "maximum": 225,
                  "example": 85
                },
                "unit": {
                  "description": "- c : Celsius (fixed)",
                  "type": "string",
                  "enum": [
                    "c"
                  ],
                  "example": "c"
                }
              }
            },
            "vehicleStartStatus": {
              "description": "Accepted command in order request.<br/> - start : Start engine<br/> - setting : Set temperature after engine start<br/> - temporarySetting : Set temporary setting while engine is running (Ex. defroster by manual)<br/> - stop : Stop engine",
              "type": "string",
              "example": "temporarySetting",
              "enum": [
                "start",
                "setting",
                "temporarySetting",
                "stop"
              ]
            },
            "vehicleStartEvent": {
              "description": "Mandatory when vehicleStartStatus is \"start\" or \"setting\" or \"temporarySetting\".<br/> When vehicleStartStatus is \"stop\", this parameter is not set.",
              "type": "object",
              "required": [
                "rStartCounter",
                "eventTime"
              ],
              "properties": {
                "rStartCounter": {
                  "description": "RES success counter value<br/> *Reset thist counter to 0 when IG-ON.",
                  "type": "number",
                  "format": "int32",
                  "minimum": 0,
                  "maximum": 2,
                  "example": 2
                },
                "eventTime": {
                  "description": "TCU monitoring time. (UTC Time, RFC3339)(YYYY-MM-DDTHH:MM:SS+00:00)<br/> When time is unclear is as follows.<br/> 1900-01-01T00:00:00+00:00",
                  "type": "string",
                  "example": "2017-06-30T12:50:00+00:00",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$"
                }
              }
            },
            "acStatus": {
              "description": "AC Status",
              "type": "object",
              "required": [
                "acTempVal",
                "acDefSetting"
              ],
              "properties": {
                "acTempVal": {
                  "description": "Temperature setting.<br/> - 00: Unknown<br/> - 01: Hi<br/> - 02: Lo<br/> - 03: TEMP Mode \"WARM\"<br/> - 04: TEMP Mode \"NORMAL\"<br/> - 05: TEMP Mode \"COOL\"<br/> - 0A~2A: 15.5～31.5[°C] in increments of 0.5°C<br/> - 30=4C: 58～86[°F] in increments of 1°F<br/>\nDefault value : 00",
                  "type": "string",
                  "example": "01",
                  "enum": [
                    "00",
                    "01",
                    "02",
                    "03",
                    "04",
                    "05",
                    "0A",
                    "0B",
                    "0C",
                    "0D",
                    "0E",
                    "0F",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "1A",
                    "1B",
                    "1C",
                    "1D",
                    "1E",
                    "1F",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "2A",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "3A",
                    "3B",
                    "3C",
                    "3D",
                    "3E",
                    "3F",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "4A",
                    "4B",
                    "4C"
                  ]
                },
                "acDefSetting": {
                  "description": "Defroster interlocking (ON / OFF) setting by automatic.<br/> - autoOn : Turn on the defroster<br/> - autoOff : Turn off the defroster<br/> - unknown : Undetectable<br/> <br/> Default value : unknown",
                  "type": "string",
                  "example": "autoOn",
                  "enum": [
                    "autoOn",
                    "autoOff",
                    "unknown"
                  ]
                },
                "acTemporarySetting": {
                  "description": "Mandatory when command is \"temporarySetting\".",
                  "type": "object",
                  "required": [
                    "acDefSetting"
                  ],
                  "properties": {
                    "acDefSetting": {
                      "description": "Defroster interlocking (ON / OFF) setting by manual.<br/> - manualOn : Turn on the defroster<br/> - manualOff : Turn off the defroster<br/> - unknown : Undetectable<br/> <br/> Default value : unknown",
                      "type": "string",
                      "example": "manualOn",
                      "enum": [
                        "manualOn",
                        "manualOff",
                        "unknown"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "RemoteEngineEventResponse": {
      "description": "Remote Engine Start response",
      "type": "object",
      "required": [
        "ignition",
        "resultCode",
        "vehicleControl"
      ],
      "properties": {
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        },
        "resultCode": {
          "$ref": "#/definitions/CommonRemoteEngineResultCode"
        },
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "cabinTemperature",
            "vehicleStartStatus"
          ],
          "properties": {
            "cabinTemperature": {
              "description": "Cabin Temperature",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "-30 to 85 : Inner temperature<br/> 224 : Not determined<br/> 225 : Broken<br/> <br/> Default value : 244",
                  "type": "number",
                  "format": "int32",
                  "default": 224,
                  "minimum": -30,
                  "maximum": 225,
                  "example": 85
                },
                "unit": {
                  "description": "- c : Celsius (fixed)",
                  "type": "string",
                  "enum": [
                    "c"
                  ],
                  "example": "c"
                }
              }
            },
            "vehicleStartStatus": {
              "description": "Command set in TCU.<br/> - stop : Stop engine",
              "type": "string",
              "example": "stop",
              "enum": [
                "stop"
              ]
            }
          }
        }
      }
    },
    "RemoteEngineEventHistoryResponse": {
      "description": "Remote Engine Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "received"
                ],
                "example": "received"
              },
              "detail": {
                "$ref": "#/definitions/RemoteEngineEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "OwnershipRegister": {
      "description": "Ownership Register- Request Body",
      "type": "object",
      "required": [
        "globalId"
      ],
      "properties": {
        "globalId": {
          "description": "globalID (a.k.a. PersonalID).</br> If globalID not registered in GTC is specified, it is registered.</br> Even if global ID registered in GTC but invalid is specified, it becomes valid.",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        }
      }
    },
    "OwnershipValidityRetrivalResponse": {
      "description": "Ownership Validity Retrival- Response Body",
      "type": "object",
      "required": [
        "validity"
      ],
      "properties": {
        "validity": {
          "description": "The validity status of the specified productOwnId</br> - 0: Invalid - 1: Valid",
          "type": "number",
          "enum": [
            1,
            0
          ],
          "example": 1
        }
      }
    },
    "OwnershipMemberColligationRequest": {
      "description": "Ownership Member Colligation - Request Body",
      "type": "object",
      "required": [
        "origGlobalId",
        "destGlobalId"
      ],
      "properties": {
        "origGlobalId": {
          "description": "Originally associated GlobalID",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 1234567890123456
        },
        "destGlobalId": {
          "description": "Newly associated GlobalID",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 1234567890123456
        }
      }
    },
    "RemoteLockAsyncRequest": {
      "description": "Request Remote Lock",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- allLock : Lock all doors<br/> - doorUnlock : Unlock driver's side door<br/> - trunkUnlock : Unlock trunk<br/> - tailgateOpen : Open tailgate",
          "type": "string",
          "example": "allLock",
          "enum": [
            "allLock",
            "doorUnlock",
            "trunkUnlock",
            "tailgateOpen"
          ]
        }
      }
    },
    "RemoteLockResultHistoryResponse": {
      "description": "Remote Engine Result History - Request Body ",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "allLock",
                "enum": [
                  "allLock",
                  "doorUnlock",
                  "trunkUnlock",
                  "tailgateOpen"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/CommonIgnitionRequired"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RemoteTrunkLockAsyncRequest": {
      "description": "Request Remote Lock",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- allLock : Lock all doors<br/> - trunkUnlock : Unlock trunk",
          "type": "string",
          "example": "allLock",
          "enum": [
            "allLock",
            "trunkUnlock"
          ]
        }
      }
    },
    "RemoteTrunkLockResultHistoryResponse": {
      "description": "Remote TrunkLock Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "allLock",
                "enum": [
                  "allLock",
                  "trunkUnlock"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/CommonIgnitionRequired"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RemoteTailgateLockAsyncRequest": {
      "description": "Request Tailgate Lock",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- allLock : Lock all doors<br/> - tailgateOpen : Open tailgate",
          "type": "string",
          "example": "allLock",
          "enum": [
            "allLock",
            "tailgateOpen"
          ]
        }
      }
    },
    "RemoteTailgateLockResultHistoryResponse": {
      "description": "Remote TailgateLock Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "allLock",
                "enum": [
                  "allLock",
                  "tailgateOpen"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/CommonIgnitionRequired"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "CarFinderHornLightAsyncRequest": {
      "description": "Car Finder Horn Light Async Request- Request Body",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- horn-lights : Start horn and lights<br/> - horn : Start horn<br/> - lights : Start lights<br/> - stop : Stop horn and lights",
          "type": "string",
          "example": "horn-lights",
          "enum": [
            "horn-lights",
            "horn",
            "lights",
            "stop"
          ]
        }
      }
    },
    "CarFinderHornLightResultResponse": {
      "description": "Car Finder HornLight Result - Response Body",
      "type": "object",
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "CarFinderHornLightEventResponse": {
      "description": "Car Finder Horn Light Event - Response Body",
      "type": "object",
      "required": [
        "gpsData",
        "ignition"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "CarFinderHornLightResultHistoryResponse": {
      "description": "Car Finder Horn Light Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "horn-lights",
                "enum": [
                  "horn-lights",
                  "horn",
                  "lights",
                  "stop"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "description": "Detail Info",
                "type": "object",
                "required": [
                  "gpsData",
                  "ignition"
                ],
                "properties": {
                  "gpsData": {
                    "$ref": "#/definitions/CommonGpsData"
                  },
                  "ignition": {
                    "$ref": "#/definitions/CommonIgnition"
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "CarFinderHornLightEventHistoryResponse": {
      "description": "Car Finder Horn Light Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "stop"
                ],
                "example": "stop"
              },
              "detail": {
                "$ref": "#/definitions/CarFinderHornLightEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "CarFinderLocationResultResponse": {
      "description": "Car Finder Location Result - Response Body",
      "type": "object",
      "required": [
        "ignition"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "CarFinderLocationResultHistoryResponse": {
      "description": "Car Finder Horn Light Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "description": "Detail Info",
                "type": "object",
                "required": [
                  "gpsData",
                  "ignition"
                ],
                "properties": {
                  "gpsData": {
                    "$ref": "#/definitions/CommonGpsData"
                  },
                  "ignition": {
                    "$ref": "#/definitions/CommonIgnition"
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "WiFiSpotAsyncRequest": {
      "description": "Wi-Fi hotspot On/Off",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "get : get now config only<br/> update : update config",
          "type": "string",
          "example": "get",
          "enum": [
            "get",
            "update"
          ]
        },
        "config": {
          "description": "Configuration",
          "type": "object",
          "properties": {
            "mode": {
              "description": "on : Turn on Wi-Fi hotspot.<br/> off : Turn off Wi-Fi hotspot.",
              "type": "string",
              "example": "on",
              "enum": [
                "on",
                "off"
              ]
            },
            "ssid": {
              "description": "Wifi SSID",
              "type": "string",
              "maxLength": 32,
              "example": "SSIDNAME"
            },
            "password": {
              "description": "Encrypted password",
              "type": "string",
              "maxLength": 256,
              "example": "U+/KMyY9LnosmbHBB1pUNQ=="
            }
          }
        }
      }
    },
    "WiFiSpotResultResponse": {
      "description": "WiFi Spot Result - Response Body ",
      "type": "object",
      "properties": {
        "mode": {
          "description": "on : Wi-Fi hotspot is turned on<br/> off : Wi-Fi hotspot is turned off",
          "type": "string",
          "example": "on",
          "enum": [
            "on",
            "off"
          ]
        },
        "ssid": {
          "description": "Wifi SSID",
          "type": "string",
          "maxLength": 32,
          "example": "SSIDNAME"
        },
        "password": {
          "description": "Encrypted password",
          "type": "string",
          "maxLength": 256,
          "example": "U+/KMyY9LnosmbHBB1pUNQ=="
        }
      }
    },
    "WiFiSpotResultHistoryResponse": {
      "description": "WiFi Spot Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "get",
                "enum": [
                  "get",
                  "update"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "description": "Detail",
                "type": "object",
                "required": [
                  "mode",
                  "ssid",
                  "password"
                ],
                "properties": {
                  "mode": {
                    "description": "on : Wi-Fi hotspot is turned on<br/> off : Wi-Fi hotspot is turned off",
                    "type": "string",
                    "example": "on",
                    "enum": [
                      "on",
                      "off"
                    ]
                  },
                  "ssid": {
                    "description": "Wifi SSID",
                    "type": "string",
                    "maxLength": 32,
                    "example": "SSIDNAME"
                  },
                  "password": {
                    "description": "Encrypted password",
                    "type": "string",
                    "maxLength": 256,
                    "example": "U+/KMyY9LnosmbHBB1pUNQ=="
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "LocationAsyncRequest": {
      "description": "Location Async Request - Request Body",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "Command",
          "type": "string",
          "example": "on",
          "enum": [
            "on",
            "off"
          ]
        },
        "vehicleControl": {
          "type": "object",
          "required": [
            "uploadInterval",
            "uploadDuration"
          ],
          "properties": {
            "uploadInterval": {
              "description": "Interval for uploading vehicle position information.",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Seconds of interval. [3 - 60]",
                  "type": "number",
                  "example": 3,
                  "minimum": 3,
                  "maximum": 60
                },
                "unit": {
                  "description": "sec :Second",
                  "type": "string",
                  "enum": [
                    "sec"
                  ],
                  "example": "sec"
                }
              }
            },
            "uploadDuration": {
              "description": "Duration for uploading vehicle position information.",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Seconds of duration. [3 - 864000]",
                  "type": "number",
                  "example": 3,
                  "minimum": 3,
                  "maximum": 864000
                },
                "unit": {
                  "description": "sec :Second",
                  "type": "string",
                  "enum": [
                    "sec"
                  ],
                  "example": "sec"
                }
              }
            }
          }
        }
      }
    },
    "LocationResultHistoryResponse": {
      "description": "Location Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "on",
                "enum": [
                  "on",
                  "off"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PoiAsyncRequest": {
      "description": "POI",
      "type": "object",
      "required": [
        "name",
        "coordinates"
      ],
      "properties": {
        "name": {
          "description": "Name of POI",
          "type": "string",
          "maxLength": 255,
          "example": "poi name"
        },
        "address": {
          "description": "Address of POI",
          "type": "object",
          "properties": {
            "street": {
              "description": "Street of Address of POI",
              "type": "string",
              "maxLength": 255,
              "example": "21th Avenue"
            },
            "city": {
              "description": "City of Address of POI",
              "type": "string",
              "maxLength": 255,
              "example": "New York City"
            },
            "state": {
              "description": "State of Address of POI.",
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "example": "NY"
            },
            "zip": {
              "description": "Zip code of Address of POI",
              "type": "string",
              "maxLength": 10,
              "example": "10004"
            }
          }
        },
        "coordinates": {
          "description": "Coordinates of POI",
          "type": "object",
          "required": [
            "latitude",
            "longitude",
            "datum",
            "format"
          ],
          "properties": {
            "latitude": {
              "description": "Latitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> latitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether North or South is determined by mark (+/-).<br/> + : North latitude<br/> - : South latitude",
              "type": "number",
              "example": 324000000,
              "minimum": -324000000,
              "maximum": 324000000
            },
            "longitude": {
              "description": "Longitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> longitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether East or West is determined by mark (+/-).<br/> + : East longitude<br/> - : West longitude",
              "type": "number",
              "example": 648000000,
              "minimum": -648000000,
              "maximum": 648000000
            },
            "datum": {
              "description": "- wgs84 : World Geodetic System (fixed)",
              "type": "string",
              "enum": [
                "wgs84"
              ],
              "example": "wgs84"
            },
            "format": {
              "description": "- mas : milliarcseconds (fixed)",
              "type": "string",
              "enum": [
                "mas"
              ],
              "example": "mas"
            }
          }
        },
        "phoneNumber": {
          "description": "PhoneNumber of POI",
          "type": "string",
          "maxLength": 16,
          "example": "05011111111"
        },
        "poiId": {
          "description": "ID of POI Provider",
          "type": "string",
          "maxLength": 1,
          "example": "1"
        },
        "poiProvider": {
          "description": "POI Provider name. (Ex. here, Foursquare)",
          "type": "string",
          "maxLength": 60,
          "example": "Foursquare"
        }
      }
    },
    "PoiResultHistoryResponse": {
      "description": "Location Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "WipeHuResultHistoryResponse": {
      "description": "Wipe Hu Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/CommonIgnitionRequired"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RemoteChargeAsyncRequest": {
      "description": "Request Remote Charge",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- start : Start remote charge<br/> - stop : Stop remote charge",
          "type": "string",
          "example": "start",
          "enum": [
            "start",
            "stop"
          ]
        }
      }
    },
    "RemoteChargeResultHistoryResponse": {
      "description": "Remote Charge Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "start",
                "enum": [
                  "start",
                  "stop"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "MaximumChargeAsyncRequest": {
      "description": "Request Maximum Charge",
      "type": "object",
      "properties": {
        "locationHome": {
          "description": "Charge setting at home.",
          "type": "object",
          "required": [
            "maxCharge"
          ],
          "properties": {
            "maxCharge": {
              "description": "Maximum charging capacity.Unit is percent(%).",
              "type": "number",
              "enum": [
                80,
                85,
                90,
                95,
                100
              ],
              "example": 100
            }
          }
        },
        "locationAway": {
          "description": "Charge setting away from home.",
          "type": "object",
          "required": [
            "maxCharge"
          ],
          "properties": {
            "maxCharge": {
              "description": "Maximum charging capacity.Unit is percent(%).",
              "type": "number",
              "enum": [
                80,
                85,
                90,
                95,
                100
              ]
            }
          },
          "example": 100
        }
      }
    },
    "MaximumChargeResultHistoryResponse": {
      "description": "Maximum Charge Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PreRemoteChargeProhibitionAsyncRequest": {
      "description": "Pre-Remote Charge Prohibition - Request Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "chargeProhibitionTimerSettings"
          ],
          "properties": {
            "chargeProhibitionTimerSettings": {
              "description": "2 elements",
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "items": {
                "type": "object",
                "required": [
                  "chargeProhibitionDayOfWeek",
                  "chargeProhibitionTimerCommand",
                  "chargeProhibitionLocation",
                  "chargeProhibitionTimerOption"
                ],
                "properties": {
                  "chargeProhibitionDayOfWeek": {
                    "description": "Day of the week to set charging prohibited. (DAY is mon | tue | wed | thu | fri | sat | sun)",
                    "type": "string",
                    "enum": [
                      "DAY,DAY,…,DAY",
                      "invalid"
                    ],
                    "example": "mon,tue"
                  },
                  "chargeProhibitionTimerCommand": {
                    "description": "Command",
                    "type": "string",
                    "example": "time",
                    "enum": [
                      "off",
                      "time",
                      "invalid"
                    ]
                  },
                  "chargeProhibitionLocation": {
                    "description": "Command",
                    "type": "string",
                    "example": "home",
                    "enum": [
                      "home",
                      "all",
                      "invalid"
                    ]
                  },
                  "chargeProhibitionTimerOption": {
                    "type": "object",
                    "description": "Charge Prohibition Timer Option",
                    "required": [
                      "chargeProhibitionStartTime",
                      "chargeProhibitionEndTime"
                    ],
                    "properties": {
                      "chargeProhibitionStartTime": {
                        "description": "Start time (HHMM)",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1244"
                      },
                      "chargeProhibitionEndTime": {
                        "description": "End time (HHMM)",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1320"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "PreRemoteChargeProhibitionResultHistoryResponse": {
      "description": "Pre-Remote Charge Prohibition Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RemoteClimateAsyncRequest": {
      "description": "Remote Climate Async Request - Request Body",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "Command",
          "type": "string",
          "example": "start",
          "enum": [
            "setting",
            "temporarySetting",
            "start",
            "stop"
          ]
        },
        "vehicleControl": {
          "description": "Mandatory when command is \"setting\" or \"temporarySetting\".",
          "type": "object",
          "properties": {
            "acSetting": {
              "description": "Mandatory when command is \"setting\".",
              "type": "object",
              "properties": {
                "acTempVal": {
                  "description": "Temperature setting.",
                  "type": "string",
                  "example": "01",
                  "enum": [
                    "01",
                    "02",
                    "03",
                    "04",
                    "05",
                    "0A",
                    "0B",
                    "0C",
                    "0D",
                    "0E",
                    "0F",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "1A",
                    "1B",
                    "1C",
                    "1D",
                    "1E",
                    "1F",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "2A",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "3A",
                    "3B",
                    "3C",
                    "3D",
                    "3E",
                    "3F",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "4A",
                    "4B",
                    "4C"
                  ]
                },
                "acDefSetting": {
                  "description": "Defroster interlocking (ON / OFF) setting by automatic.",
                  "type": "string",
                  "example": "autoOn",
                  "enum": [
                    "autoOn",
                    "autoOff"
                  ]
                },
                "acDurationSetting": {
                  "description": "AC Duraction Settings. Values: 10 | 20 | 30",
                  "type": "string",
                  "example": "10",
                  "enum": [
                    "10",
                    "20",
                    "30"
                  ]
                }
              }
            },
            "acTemporarySetting": {
              "description": "Mandatory when command is \"temporarySetting\".",
              "type": "object",
              "properties": {
                "acDefSetting": {
                  "description": "Defroster interlocking (ON / OFF) setting by manual.",
                  "type": "string",
                  "example": "manualOn",
                  "enum": [
                    "manualOn",
                    "manualOff"
                  ]
                },
                "acExtend": {
                  "description": "AC extension time. Max 30 minutes that the total of the first time and the extension.",
                  "type": "string",
                  "example": "10",
                  "enum": [
                    "10",
                    "20"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "RemoteClimateResultResponse": {
      "description": "Remote Climate Result - Response Body",
      "type": "object",
      "properties": {
        "vehicleControl": {
          "description": "Optional Parent Object",
          "type": "object",
          "required": [
            "cabinTemperature"
          ],
          "properties": {
            "cabinTemperature": {
              "description": "Cabin Temperature",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Value ([-30 - 85],224,225) - -30 to 85`:` temperature - 224`:` Not determined - 225`:` Broken\n",
                  "type": "number",
                  "format": "int32",
                  "minimum": -30,
                  "maximum": 225,
                  "default": 224,
                  "example": 85
                },
                "unit": {
                  "description": "Unit",
                  "type": "string",
                  "enum": [
                    "c"
                  ],
                  "example": "c"
                }
              }
            }
          }
        }
      }
    },
    "RemoteClimateResultHistoryResponse": {
      "description": "Remote Climate Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "- setting : Set temperature before AC start</br> - start : Start AC</br> - temporarySetting : Set temporary setting while AC is running (Ex. defroster by manual)</br> - stop : Stop AC",
                "type": "string",
                "example": "start",
                "enum": [
                  "setting",
                  "start",
                  "temporarySetting",
                  "stop"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/RemoteClimateResultResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PreRemoteClimateAsyncRequest": {
      "description": "Pre Remote AC - Request Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "acTimerSettings"
          ],
          "properties": {
            "acTimerSettings": {
              "description": "7 elements.",
              "type": "array",
              "minItems": 7,
              "maxItems": 7,
              "items": {
                "type": "object",
                "required": [
                  "acDayOfWeek",
                  "acTimerCommand",
                  "acTimerOption"
                ],
                "properties": {
                  "acDayOfWeek": {
                    "description": "Day of the week to set charging prohibited. (DAY is mon | tue | wed | thu | fri | sat | sun)",
                    "type": "string",
                    "enum": [
                      "DAY,DAY,…,DAY",
                      "invalid"
                    ],
                    "example": "mon,tue"
                  },
                  "acTimerCommand": {
                    "description": "Command",
                    "type": "string",
                    "example": "time",
                    "enum": [
                      "off",
                      "time",
                      "invalid"
                    ]
                  },
                  "acTimerOption": {
                    "type": "object",
                    "description": "AC Timer Option",
                    "required": [
                      "acStartTime1",
                      "acStartTime2"
                    ],
                    "properties": {
                      "acStartTime1": {
                        "description": "Start time 1 (HHMM)",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1244"
                      },
                      "acStartTime2": {
                        "description": "Start time 2 (HHMM)",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1320"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "PreRemoteClimateResultHistoryResponse": {
      "description": "Pre-Remote Climate Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PreRemoteClimateEventHistoryResponse": {
      "description": "Pre Remote Climate Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "start",
                  "stop"
                ],
                "example": "stop"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PppSettingResultHistoryResponse": {
      "description": "Ppp Setting Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "PppSettingEventResponse": {
      "description": "PPP Setting Event response",
      "type": "object",
      "properties": {
        "tcu": {
          "description": "At least, one of tcu or ivi is mandatory",
          "type": "object",
          "required": [
            "dataUpload"
          ],
          "properties": {
            "dataUpload": {
              "description": "- true : Enable data upload - false : Disable data upload - unknown: Unknown status of data upload\n",
              "type": "string",
              "enum": [
                "true",
                "false",
                "unknown"
              ],
              "example": "true"
            }
          }
        },
        "ivi": {
          "description": "At least, one of tcu or ivi is mandatory",
          "type": "object",
          "required": [
            "dataUpload"
          ],
          "properties": {
            "dataUpload": {
              "description": "- true : Enable data upload - false : Disable data upload\n",
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "PppSettingEventHistoryResponse": {
      "description": "Pre Remote Climate Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "notification"
                ],
                "example": "notification"
              },
              "detail": {
                "$ref": "#/definitions/PppSettingEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "DaTapResultResponse": {
      "description": "DaTap Result - Response Body",
      "type": "object",
      "properties": {
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        },
        "connectionStatus": {
          "description": "Status about DA connection.</br> - connected : TCU connected to DA</br> - disconnected : TCU disconnected to DA",
          "type": "string",
          "enum": [
            "connected",
            "disconnected"
          ],
          "example": "connected"
        }
      }
    },
    "DaTapResultHistoryResponse": {
      "description": "DaTap Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/DaTapResultResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "GeoFencingRequest": {
      "description": "Geo Fencing - Request Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "geoFences"
          ],
          "properties": {
            "geoFences": {
              "description": "GEO Fences",
              "type": "array",
              "maxItems": 6,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "updateType"
                ],
                "properties": {
                  "id": {
                    "description": "Geo Fence ID [1 - 6]",
                    "type": "number",
                    "minimum": 1,
                    "maximum": 6,
                    "example": 3
                  },
                  "updateType": {
                    "description": "- add: Add this id data<br/> - update: Update this id data<br/> - delete: Delete this id data",
                    "type": "string",
                    "example": "update",
                    "enum": [
                      "add",
                      "update",
                      "delete"
                    ]
                  },
                  "rev": {
                    "description": "Revision of data.<br/> Mandatory when updateType is \"update\" or \"delete\".",
                    "type": "number",
                    "maxLength": 9,
                    "example": 1
                  },
                  "configuration": {
                    "description": "Mandatory when updateType is \"add\" or \"update\".",
                    "type": "object",
                    "required": [
                      "nickName",
                      "activationSetup",
                      "schedule"
                    ],
                    "properties": {
                      "nickName": {
                        "description": "nick name of this setting",
                        "type": "string",
                        "maxLength": 24,
                        "example": "Stay-within"
                      },
                      "activationSetup": {
                        "description": "- active: Active this setting<br/> - inactive: Inactive this setting",
                        "type": "string",
                        "example": "active",
                        "enum": [
                          "active",
                          "inactive"
                        ]
                      },
                      "geoFenceSetup": {
                        "$ref": "#/definitions/CommonGeoFenceSetup"
                      },
                      "schedule": {
                        "$ref": "#/definitions/CommonScheduleRequest"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GeoFencingStatusResponse": {
      "description": "Geo Fencing Status - Response Body",
      "type": "object",
      "required": [
        "geoFenceStatus"
      ],
      "properties": {
        "geoFenceStatus": {
          "description": "geoFenceStatus",
          "type": "object",
          "properties": {
            "geoFences": {
              "description": "geoFences",
              "type": "object",
              "maxItems": 6,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "configuration"
                ],
                "properties": {
                  "id": {
                    "description": "Geo Fence ID [1 - 6]",
                    "type": "number",
                    "minimum": 1,
                    "maximum": 6,
                    "example": 3
                  },
                  "configuration": {
                    "description": "Configuration",
                    "type": "object",
                    "required": [
                      "nickName",
                      "activationEnable",
                      "schedule"
                    ],
                    "properties": {
                      "nickName": {
                        "description": "nick name of this setting",
                        "type": "string",
                        "maxLength": 24,
                        "example": "Stay-within"
                      },
                      "activationEnable": {
                        "description": "Enable or disable this setting",
                        "type": "string",
                        "example": "enabled",
                        "enum": [
                          "enabled",
                          "disabled"
                        ]
                      },
                      "activationSetup": {
                        "description": "Mandatory when activationEnable is \"enabled\".</br> - activating: Activating this setting </br> - active: Active this setting</br> - deactivating: Deactivating this setting</br> - inactive: Inactive this setting",
                        "type": "string",
                        "example": "active",
                        "enum": [
                          "activating",
                          "active",
                          "deactivating",
                          "inactive"
                        ]
                      },
                      "geoFenceSetup": {
                        "$ref": "#/definitions/CommonGeoFenceSetup"
                      },
                      "schedule": {
                        "$ref": "#/definitions/CommonScheduleResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GeoFencingStatusHistoryResponse": {
      "description": "Geo Fencing Status History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "- on: Activation</br> - off: Deactivation</br> - failure_on: Failure of activation</br> - failure_off: Failure of deactivation",
                "type": "string",
                "enum": [
                  "on",
                  "off",
                  "failure_on",
                  "failure_off"
                ],
                "example": "on"
              },
              "detail": {
                "description": "Detail",
                "type": "object",
                "required": [
                  "vehicleControl"
                ],
                "properties": {
                  "vehicleControl": {
                    "description": "Object containing a list of geo fences",
                    "type": "object",
                    "required": [
                      "geoFence"
                    ],
                    "properties": {
                      "geoFence": {
                        "description": "List of geo fences",
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "Geo Fence ID",
                            "type": "number",
                            "format": "int32",
                            "minimum": 1,
                            "maximum": 6,
                            "example": 3
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "GeoFencingEventResponse": {
      "description": "Geo Fencing Event - Response Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "vehicleControl": {
          "description": "Object containing a list of geo fences",
          "type": "object",
          "required": [
            "geoFence"
          ],
          "properties": {
            "geoFence": {
              "description": "List of geo fences",
              "type": "object",
              "required": [
                "id",
                "configuration"
              ],
              "properties": {
                "id": {
                  "description": "Geo Fence ID",
                  "type": "number",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 6,
                  "example": 3
                },
                "configuration": {
                  "description": "Configuration",
                  "type": "object",
                  "required": [
                    "nickName",
                    "geoFenceSetup"
                  ],
                  "properties": {
                    "nickName": {
                      "description": "nick name of this setting",
                      "type": "string",
                      "maxLength": 24,
                      "example": "Stay-within"
                    },
                    "geoFenceSetup": {
                      "description": "Mandatory when activationSetup is \"active\".",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "description": "Type of Geo Fence.",
                          "type": "object",
                          "required": [
                            "type",
                            "mode"
                          ],
                          "properties": {
                            "type": {
                              "description": "- circle : Circle type.(fixed)",
                              "type": "string",
                              "example": "circle",
                              "enum": [
                                "circle"
                              ]
                            },
                            "mode": {
                              "description": "- inclusion : Alert when vehicle gets out of this Geo Fence.<br/> - exclusion : Alert when vehicle gets inside this Geo Fence.",
                              "type": "string",
                              "example": "exclusion",
                              "enum": [
                                "inclusion",
                                "exclusion"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GeoFencingEventHistoryResponse": {
      "description": "Geo Fencing Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/GeoFencingEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "GeoFencingFreeDrawingAsyncRequest": {
      "description": "Geo Fencing Free Drawing Async Request - Request Body",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "Command",
          "type": "string",
          "example": "on",
          "enum": [
            "on",
            "off"
          ]
        },
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "interval"
          ],
          "properties": {
            "interval": {
              "description": "Interval",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Value in minutes",
                  "type": "number",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 255,
                  "example": 3
                },
                "unit": {
                  "description": "Type",
                  "type": "string",
                  "enum": [
                    "min"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "GeoFencingFreeDrawingEventResponse": {
      "description": "Geo Fencing Free Drawing Event - Response Body",
      "type": "object",
      "required": [
        "gpsData"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        }
      }
    },
    "GeoFencingFreeDrawingEventHistoryResponse": {
      "description": "Geo Fencing Free Drawing Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "- on: Activation</br> - off: Deactivation</br> - failure_on: Failure of activation</br> - failure_off: Failure of deactivation",
                "type": "string",
                "enum": [
                  "on",
                  "off",
                  "failure_on",
                  "failure_off"
                ],
                "example": "on"
              },
              "detail": {
                "$ref": "#/definitions/GeoFencingFreeDrawingEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "GeoFencingFreeDrawingResultHistoryResponse": {
      "description": "Geo Fencing Free Drawing Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "on",
                "enum": [
                  "on",
                  "off"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "SpeedAlertRequest": {
      "description": "Speed Alert Request -  Request Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "speedAlerts"
          ],
          "properties": {
            "speedAlerts": {
              "description": "Speed Alerts",
              "type": "array",
              "maxItems": 3,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "updateType"
                ],
                "properties": {
                  "id": {
                    "description": "Speed Alert ID [1 - 3]",
                    "type": "number",
                    "minimum": 1,
                    "maximum": 3,
                    "example": 1
                  },
                  "updateType": {
                    "description": "- add: Add this id data<br/> - update: Update this id data<br/> - delete: Delete this id data",
                    "type": "string",
                    "example": "update",
                    "enum": [
                      "add",
                      "update",
                      "delete"
                    ]
                  },
                  "rev": {
                    "description": "Revision of data.<br/> Mandatory when updateType is \"update\" or \"delete\".",
                    "type": "number",
                    "maxLength": 9,
                    "example": 1
                  },
                  "configuration": {
                    "description": "Mandatory when updateType is \"add\" or \"update\".",
                    "type": "object",
                    "required": [
                      "nickName",
                      "activationSetup",
                      "schedule"
                    ],
                    "properties": {
                      "nickName": {
                        "description": "nick name of this setting",
                        "type": "string",
                        "maxLength": 24,
                        "example": "Stay-within"
                      },
                      "activationSetup": {
                        "description": "- active: Active this setting<br/> - inactive: Inactive this setting",
                        "type": "string",
                        "example": "active",
                        "enum": [
                          "active",
                          "inactive"
                        ]
                      },
                      "speedSetup": {
                        "$ref": "#/definitions/CommonSpeedSetup"
                      },
                      "schedule": {
                        "$ref": "#/definitions/CommonScheduleRequest"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SpeedAlertStatusResponse": {
      "description": "Request Speed Alert",
      "type": "object",
      "required": [
        "speedAlertStatus"
      ],
      "properties": {
        "speedAlertStatus": {
          "description": "Speed Alert Status",
          "type": "object",
          "required": [
            "speedAlerts"
          ],
          "properties": {
            "speedAlerts": {
              "description": "Speed Alerts",
              "type": "array",
              "maxItems": 3,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "configuration"
                ],
                "properties": {
                  "id": {
                    "description": "Speed Alert ID [1 - 3]",
                    "type": "number",
                    "minimum": 1,
                    "maximum": 3,
                    "example": 1
                  },
                  "configuration": {
                    "description": "Configuration",
                    "type": "object",
                    "required": [
                      "nickName",
                      "activationEnable",
                      "schedule"
                    ],
                    "properties": {
                      "nickName": {
                        "description": "nick name of this setting",
                        "type": "string",
                        "maxLength": 24,
                        "example": "Stay-within"
                      },
                      "activationEnable": {
                        "description": "Enable or disable this setting",
                        "type": "string",
                        "example": "enabled",
                        "enum": [
                          "enabled",
                          "disabled"
                        ]
                      },
                      "activationSetup": {
                        "description": "Mandatory when activationEnable is \"enabled\"</br>. - activating: Activating this setting</br>  - active: Active this setting</br> - deactivating: Deactivating this setting</br> - inactive: Inactive this setting",
                        "type": "string",
                        "example": "active",
                        "enum": [
                          "activating",
                          "active",
                          "deactivating",
                          "inactive"
                        ]
                      },
                      "speedSetup": {
                        "$ref": "#/definitions/CommonSpeedSetup"
                      },
                      "schedule": {
                        "$ref": "#/definitions/CommonScheduleResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SpeedAlertStatusHistoryResponse": {
      "description": "Speed Alert Status History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "- on: Activation</br> - off: Deactivation</br> - failure_on: Failure of activation</br> - failure_off: Failure of deactivation",
                "type": "string",
                "enum": [
                  "on",
                  "off",
                  "failure_on",
                  "failure_off"
                ],
                "example": "on"
              },
              "detail": {
                "description": "Detail",
                "type": "object",
                "required": [
                  "vehicleControl"
                ],
                "properties": {
                  "vehicleControl": {
                    "description": "Vehicle Control",
                    "type": "object",
                    "required": [
                      "geoFence"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID",
                        "type": "number",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 6,
                        "example": 3
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "SpeedAlertEventResponse": {
      "description": "Speed Alert Event - Response Body",
      "type": "object",
      "required": [
        "vehicleControl"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "vehicleControl": {
          "description": "Vehicle Control",
          "type": "object",
          "required": [
            "id",
            "configuration"
          ],
          "properties": {
            "id": {
              "description": "Geo Fence ID",
              "type": "number",
              "format": "int32",
              "minimum": 1,
              "maximum": 6,
              "example": 3
            },
            "configuration": {
              "description": "Configuration",
              "type": "object",
              "required": [
                "nickName"
              ],
              "properties": {
                "nickName": {
                  "description": "nick name of this setting",
                  "type": "string",
                  "maxLength": 24,
                  "example": "Stay-within"
                }
              }
            },
            "speedReport": {
              "description": "speed report",
              "type": "object",
              "required": [
                "reportListItemCounter",
                "threshold",
                "violationEvent"
              ],
              "properties": {
                "reportAtIgnitionOff": {
                  "description": "- true : Speed Alert Report is enable at IG-OFF<br/> - false : Speed Alert Report is disable at IG-OFF",
                  "example": true,
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                },
                "reportListItemCounter": {
                  "description": "The number of violation which has been determined.",
                  "type": "number",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 255,
                  "example": 30
                },
                "threshold": {
                  "description": "Threshold for violating speed.",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "Violating speed.",
                      "type": "number",
                      "format": "int32",
                      "minimum": 2,
                      "maximum": 249,
                      "example": 120
                    },
                    "unit": {
                      "description": "- kph : kilometers per hour (fixed)",
                      "type": "string",
                      "enum": [
                        "kph"
                      ],
                      "example": "kph"
                    }
                  }
                },
                "violationEvent": {
                  "description": "violation event",
                  "type": "object",
                  "required": [
                    "eventTime",
                    "vehicleSpeed"
                  ],
                  "properties": {
                    "eventTime": {
                      "description": "Time information that TCU holds when detecting maximum speed during 1 trip.(RFC3339) (YYYY-MM-DDTHH:MM:SS+00:00) When time is unclear is as follows.  1900-01-01T00:00:00+00:00",
                      "type": "string",
                      "example": "2017-06-30T12:50:00+00:00",
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$"
                    },
                    "vehicleSpeed": {
                      "description": "vehicule speed",
                      "type": "object",
                      "required": [
                        "value",
                        "unit"
                      ],
                      "properties": {
                        "value": {
                          "description": "Maximum speed in cases where violation occurred.",
                          "type": "number",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 250,
                          "example": 150
                        },
                        "unit": {
                          "description": "- kph : kilometers per hour (fixed)",
                          "type": "string",
                          "enum": [
                            "kph"
                          ],
                          "example": "kph"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SpeedAlertEventHistoryResponse": {
      "description": "Speed Alert Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "report",
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/SpeedAlertEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "SecurityAlertEventResponse": {
      "description": "Security Alert Event - Response Body",
      "type": "object",
      "required": [
        "gpsData",
        "ignition"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "SecurityAlertEventHistoryResponse": {
      "description": "Security Alert Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/SecurityAlertEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "StolenVehicleTrackingAsyncRequest": {
      "description": "Stolen Vehicle Tracking",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "command",
          "type": "string",
          "example": "on",
          "enum": [
            "on",
            "off"
          ]
        },
        "stolenVehicleRecovery": {
          "description": "Stolen Vehicle Recovery. Mandatory when command is on",
          "type": "object",
          "required": [
            "interval"
          ],
          "properties": {
            "interval": {
              "description": "Interval",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "Value [1 - 255]",
                  "type": "number",
                  "example": 255,
                  "minimum": 1,
                  "maximum": 255
                },
                "unit": {
                  "description": "Unit",
                  "type": "string",
                  "enum": [
                    "min"
                  ],
                  "example": "min"
                }
              }
            }
          }
        }
      }
    },
    "StolenVehicleTrackingEventResponse": {
      "description": "Stolen Vehicle Tracking Event - Response Body",
      "type": "object",
      "required": [
        "gpsData",
        "ignition"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "StolenVehicleTrackingEventHistoryResponse": {
      "description": "Stolen Vehicle Tracking Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/StolenVehicleTrackingEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "StolenVehicleTrackingResultHistoryResponse": {
      "description": "Stolen Vehicle Tracking Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "on",
                "enum": [
                  "on",
                  "off"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "AcnEventResponse": {
      "description": "Acn Event - Response Body",
      "type": "object",
      "required": [
        "gpsData",
        "ignition",
        "crashTelemetry"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        },
        "crashTelemetry": {
          "description": "Crash Telemetry",
          "type": "object",
          "required": [
            "airbagDeploymentIndicator",
            "crashLocation",
            "rollover",
            "occupancy",
            "belts",
            "deltaV"
          ],
          "properties": {
            "airbagDeploymentIndicator": {
              "description": "Airbag deployment Indicator",
              "type": "string",
              "enum": [
                "activated",
                "notActivated",
                "notApplicable",
                "unknown"
              ],
              "default": "unknown",
              "example": "activated"
            },
            "crashLocation": {
              "description": "Crash Location",
              "type": "object",
              "required": [
                "frontalCrashSensor",
                "sideCrashSensorL",
                "sideCrashSensorR",
                "rearEndCrashSensor"
              ],
              "properties": {
                "frontalCrashSensor": {
                  "description": "Frontal crash sensor",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                },
                "sideCrashSensorL": {
                  "description": "Side crash sensor L",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                },
                "sideCrashSensorR": {
                  "description": "Side crash sensor R",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                },
                "rearEndCrashSensor": {
                  "description": "Rear end crash sensor",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                }
              }
            },
            "rollover": {
              "description": "Roll over",
              "type": "string",
              "enum": [
                "activated",
                "notActivated",
                "notApplicable",
                "unknown"
              ],
              "default": "unknown",
              "example": "activated"
            },
            "occupancy": {
              "description": "occupancy",
              "type": "object",
              "required": [
                "firstRowDriver",
                "firstRowPassenger"
              ],
              "properties": {
                "firstRowDriver": {
                  "description": "First row driver",
                  "type": "string",
                  "enum": [
                    "notApplicable"
                  ],
                  "example": "notApplicable"
                },
                "firstRowPassenger": {
                  "description": "First row passenger",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                }
              }
            },
            "belts": {
              "description": "belts",
              "type": "object",
              "required": [
                "firstRowDriver",
                "firstRowPassenger"
              ],
              "properties": {
                "firstRowDriver": {
                  "description": "First row driver",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                },
                "firstRowPassenger": {
                  "description": "First row passenger",
                  "type": "string",
                  "enum": [
                    "activated",
                    "notActivated",
                    "notApplicable",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "activated"
                }
              }
            },
            "deltaV": {
              "description": "Delta V",
              "type": "object",
              "required": [
                "deltaVmaxX1",
                "deltaVmaxY1"
              ],
              "properties": {
                "deltaVmaxX1": {
                  "description": "Delta V Max X1",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "Delta V Max X1 value",
                      "type": "number",
                      "format": "int32",
                      "minimum": -128,
                      "maximum": 127,
                      "default": 0,
                      "example": 3
                    },
                    "unit": {
                      "description": "kilometersPerHour",
                      "type": "string",
                      "enum": [
                        "kph"
                      ],
                      "example": "kph"
                    }
                  }
                },
                "deltaVmaxY1": {
                  "description": "Delta V Max Y1",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "Delta V Max Y1 value",
                      "type": "number",
                      "format": "int32",
                      "minimum": -128,
                      "maximum": 127,
                      "default": 0,
                      "example": 3
                    },
                    "unit": {
                      "description": "kilometersPerHour",
                      "type": "string",
                      "enum": [
                        "kph"
                      ],
                      "example": "kph"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "AcnEventHistoryResponse": {
      "description": "Acn Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/AcnEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "RoadsideCallEventResponse": {
      "description": "Road side Call Event - Response Body",
      "type": "object",
      "required": [
        "gpsData",
        "ignition"
      ],
      "properties": {
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "ignition": {
          "$ref": "#/definitions/CommonIgnition"
        }
      }
    },
    "RoadsideCallEventHistoryResponse": {
      "description": "Roadside Call Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus",
              "detail"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              },
              "detail": {
                "$ref": "#/definitions/RoadsideCallEventResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "MaintenanceMinderEventHistoryResponse": {
      "description": "Maintenance Minder Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "WarningLampEventHistoryResponse": {
      "description": "Warning Lamp History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "alert"
                ],
                "example": "alert"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "ChargeEventHistoryResponse": {
      "description": "Charge Event History - Response Body",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "description": "events",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "eventId",
              "eventTime",
              "eventStatus"
            ],
            "properties": {
              "eventId": {
                "description": "A unique ID that GTC assigns to each event.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "eventTime": {
                "description": "Event Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "eventStatus": {
                "description": "Event Status",
                "type": "string",
                "enum": [
                  "beforeCompletion",
                  "start",
                  "stop"
                ],
                "example": "start"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "DrivingLogResponse": {
      "description": "Driving Log - Response Body",
      "type": "object",
      "required": [
        "createTime",
        "timeZone",
        "payload"
      ],
      "properties": {
        "createTime": {
          "description": "(YYYY-MM-DDTHH:MM:SS+00:00)",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "example": "2018-03-01T09:00:00+00:00"
        },
        "timeZone": {
          "description": "Time zone represented by three capital letters",
          "type": "string",
          "maxLength": 3,
          "minLength": 3,
          "example": "aaa"
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        },
        "payload": {
          "description": "payload",
          "type": "object",
          "properties": {
            "count": {
              "description": "Mandatory when the data is not empty",
              "type": "number",
              "example": 1
            },
            "def": {
              "description": "Definition of data.",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object"
              }
            },
            "unit": {
              "description": "Unit of data.",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object"
              }
            },
            "data": {
              "description": "Values of data.",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "DrivingLogDetailResponse": {
      "description": "Driving Log Detail - Response Body",
      "type": "object",
      "required": [
        "totalCount",
        "tripNum",
        "createTime",
        "payload"
      ],
      "properties": {
        "totalCount": {
          "description": "Total number of acquired data",
          "type": "number",
          "example": 1
        },
        "tripNum": {
          "description": "Trip number of movement locus",
          "type": "number",
          "example": 1
        },
        "createTime": {
          "description": "(YYYY-MM-DDTHH:MM:SS+00:00)",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "example": "2018-03-01T09:00:00+00:00"
        },
        "payload": {
          "description": "payload",
          "type": "object",
          "properties": {
            "count": {
              "description": "Mandatory when the data is not empty",
              "type": "number",
              "example": 1
            },
            "def": {
              "description": "Definition of data.",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object"
              }
            },
            "data": {
              "description": "Values of data.",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "TimezoneSettingRequest": {
      "description": "Timezone Setting",
      "type": "object",
      "required": [
        "timezone"
      ],
      "properties": {
        "timezone": {
          "description": "Timezone used for scheduling function.  The value is set by \"Area/Location\" format defined in tz database.\n",
          "type": "string",
          "maxLength": 99,
          "example": "America/Los_Angeles"
        }
      }
    },
    "SocEneoutSettingRequest": {
      "description": "Soc Eneout Setting Async Request - Request Body",
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "description": "Notification level.Unit is percent(%).",
          "type": "number",
          "minimum": 1,
          "maximum": 100,
          "example": 100
        }
      }
    },
    "SocEneoutSettingStatusResponse": {
      "description": "Soc Eneout Setting Status- Response Body",
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "description": "Notification level.Unit is percent(%).",
          "type": "number",
          "minimum": 1,
          "maximum": 100,
          "example": 100
        }
      }
    },
    "VirtualKeyResponse": {
      "description": "Virtual Key - Response Body",
      "type": "string",
      "format": "binary"
    },
    "VirtualKeyResultResponse": {
      "description": "Virtual Key Result - Response Body",
      "type": "string",
      "format": "binary"
    },
    "VirtualKeyResultHistoryResponse": {
      "description": "Virtual Key Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "VinBasedOwnershipRegistration": {
      "description": "VinBased Ownership Registration - Request Body",
      "type": "object",
      "properties": {
        "permitReplacement": {
          "description": "Permit Replacement",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "default": false,
          "example": false
        }
      }
    },
    "UserRemoval": {
      "description": "User Removal - Request Body",
      "type": "object",
      "properties": {
        "deletionByForce": {
          "description": "A parameter to specify the behaviour of GTC if the GlobalID is still associated with any ownerships.</br> - True means the GlobalID (and every ownership whose owner is the GlobalID) is deleted. </br> - False means GlobalID is not deleted (default).",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "default": false,
          "example": false
        }
      }
    },
    "UserRemovalResponse": {
      "description": "User Removal - Response Body",
      "type": "object",
      "required": [
        "ownerships"
      ],
      "properties": {
        "ownerships": {
          "description": "List of ownerships associated with the GlobalID",
          "type": "array",
          "items": {
            "required": [
              "productOwnID",
              "prductOwnIDStatus"
            ],
            "properties": {
              "productOwnID": {
                "description": "Product Own Id",
                "type": "number",
                "maxLength": 16,
                "minLength": 16,
                "example": 123
              },
              "prductOwnIDStatus": {
                "description": "Whether prdocutOwnID is still remained or deleted",
                "type": "string",
                "enum": [
                  "deleted",
                  "remained"
                ],
                "example": "deleted"
              }
            }
          }
        }
      }
    },
    "TelematicsDataResultHistoryResponse": {
      "description": "Telematics Data Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "Command",
                "type": "string",
                "example": "on",
                "enum": [
                  "on",
                  "off"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              },
              "detail": {
                "$ref": "#/definitions/TelematicsDataResultResponse"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "TelematicsDataResponse": {
      "description": "Telematics Data - Response Body",
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/TelematicsDataResultResponse"
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "TelematicsDataResultResponse": {
      "description": "Telematics Data Result - Response Body",
      "type": "object",
      "required": [
        "daqId",
        "daqIdDescription",
        "count",
        "def",
        "dataId",
        "unit",
        "data"
      ],
      "properties": {
        "daqId": {
          "description": "DAQID",
          "type": "string",
          "example": "00AB01"
        },
        "daqIdDescription": {
          "description": "DAQID Description.",
          "type": "string",
          "example": "Data for CF servie team"
        },
        "count": {
          "description": "Array count of \"data\".(count === data.length)",
          "type": "number",
          "example": 100
        },
        "def": {
          "description": "Array attribute of \"data\" array.(def.length === data[i].length)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "uuid",
            "vin",
            "oilLife",
            "..."
          ]
        },
        "dataId": {
          "description": "\"dataId\" of each parameters of \"def\" array.(dataId.length === def.length)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "0A1001",
            "0A1002",
            "0A1003",
            "..."
          ]
        },
        "unit": {
          "description": "\"unit\" of each parameters of \"def\" array.(unit.length === def.length)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "km/s",
            "",
            "0.1m/s2",
            "..."
          ]
        },
        "data": {
          "description": "Each data.                                                ",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "008e21ce-b616-4a39-9d9d-ee7f7b6f1802",
              "19UNC1BA0HY092007",
              "15",
              "..."
            ]
          }
        }
      }
    },
    "OwnershipRegistration": {
      "description": "Ownership Registration - Request Body",
      "type": "object",
      "required": [
        "vin",
        "productOwnId",
        "globalId"
      ],
      "properties": {
        "vin": {
          "description": "Specify VIN to register productOwnId",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "productOwnId": {
          "description": "Specify productOwnId to be associated with the VIN",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        },
        "globalId": {
          "description": "Specify globaId to be associated with the ProductOwnId.</br> If the specified globalId is not registered in the GTC, an error occurs",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        },
        "permitReplacement": {
          "description": "Mandatory when replacing productOwnId</br> True means that productOwnId is replaced with the value set with the \"productOwnId\" parameter.</br> False means no ownership replacement is performed (default).</br> If True, even if the existing productOwnId does not exist, the productOwnId is registered.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "default": false,
          "example": false
        }
      }
    },
    "OwnershipRegistrationResponse": {
      "description": "Ownership Registration - Response Body",
      "type": "object",
      "required": [
        "productOwnId",
        "globalId"
      ],
      "properties": {
        "productOwnId": {
          "description": "Newly registered productOwnID (same as the productOwnId specified by Request)",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        },
        "globalId": {
          "description": "globalID associated with productOwnID.",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        }
      }
    },
    "OwnershipInformationResponse": {
      "description": "Ownership Registration - Response Body",
      "type": "object",
      "required": [
        "vin",
        "users"
      ],
      "properties": {
        "vin": {
          "description": "VIN",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "users": {
          "description": "User Info",
          "type": "array",
          "items": {
            "required": [
              "globalId"
            ],
            "type": "object",
            "properties": {
              "globalId": {
                "description": "globalID (a.k.a. PersonalID)",
                "type": "number",
                "maxLength": 16,
                "minLength": 16,
                "example": 123
              },
              "userType": {
                "description": "A parameter to indicate whether the user is an owner (1) or a non-owner (0)",
                "type": "number",
                "maxLength": 1,
                "minLength": 1,
                "enum": [
                  1,
                  0
                ],
                "example": 1
              }
            }
          }
        }
      }
    },
    "UserBasedVehicleInformationResponse": {
      "description": "UserBased Vehicle Information - Response Body",
      "type": "object",
      "required": [
        "vehicles"
      ],
      "properties": {
        "vehicles": {
          "description": "Vehicles Info",
          "type": "array",
          "items": {
            "required": [
              "vin",
              "productOwnId"
            ],
            "type": "object",
            "properties": {
              "vin": {
                "description": "VIN",
                "type": "string",
                "maxLength": 20,
                "example": "aaa"
              },
              "productOwnId": {
                "description": "Product Own Id",
                "type": "number",
                "maxLength": 16,
                "minLength": 16,
                "example": 123
              },
              "userType": {
                "description": "A parameter to indicate whether the user is an owner (1) or a non-owner (0)",
                "type": "number",
                "maxLength": 1,
                "minLength": 1,
                "enum": [
                  1,
                  0
                ],
                "example": 1
              }
            }
          }
        }
      }
    },
    "LatestDashboardResponse": {
      "description": "Latest Dashboard - Response Body",
      "type": "object",
      "required": [
        "timestamp",
        "gpsData",
        "odometer",
        "fuelLevel",
        "oilLife",
        "temperature",
        "doorStatus",
        "lightStatus",
        "tireStatus",
        "remoteEngineStart",
        "warningLamps",
        "maintenanceMinder",
        "windowStatus",
        "evStatus"
      ],
      "properties": {
        "timestamp": {
          "description": "Data acquisition time (UTC Time, RFC3339)",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "example": "2017-06-30T12:50:00+00:00"
        },
        "gpsData": {
          "$ref": "#/definitions/CommonGpsData"
        },
        "odometer": {
          "description": "Odometer",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "Set the latest odometer value.<br/> In case TCU has no value in memory, default value is used.<br/> Default value: 0",
              "type": "number",
              "minimum": 0,
              "maximum": 1608999,
              "default": 0,
              "example": 100000
            },
            "unit": {
              "description": "- km : Kilometer<br/> - mile : Mile",
              "type": "string",
              "enum": [
                "km",
                "mile"
              ],
              "example": "km"
            }
          }
        },
        "fuelLevel": {
          "description": "Fuel level",
          "type": "object",
          "required": [
            "currentLevel",
            "driveRange"
          ],
          "properties": {
            "currentLevel": {
              "description": "Current fuel level",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "[0 - 100],255<br/> 0 to 100 : 0=Empty scale, 100=Full scale<br/> <br/> 255 : Default value (TCU has no valid value in memory)",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 255,
                  "default": 255,
                  "example": 50
                },
                "unit": {
                  "description": "- percentage : Percentage (fixed)",
                  "type": "string",
                  "example": "percentage",
                  "enum": [
                    "percentage"
                  ]
                }
              }
            },
            "driveRange": {
              "description": "Driving range",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "0: Default value (TCU has no valid value in memory)",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2045,
                  "default": 0,
                  "example": 1000
                },
                "unit": {
                  "description": "- km : Kilometer<br/> - mile : Mile",
                  "type": "string",
                  "example": "km",
                  "enum": [
                    "km",
                    "mile"
                  ]
                }
              }
            }
          }
        },
        "oilLife": {
          "description": "Oil life",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "[0 - 100],255<br/> 0 to 100 : 0=Empty scale, 100=Full scale<br/> <br/> 255 : Default value (TCU has no valid value in memory)",
              "type": "number",
              "minimum": 0,
              "maximum": 255,
              "default": 255,
              "example": 50
            },
            "unit": {
              "description": "- percentage : Percentage (fixed)",
              "type": "string",
              "example": "percentage",
              "enum": [
                "percentage"
              ]
            }
          }
        },
        "temperature": {
          "description": "Temperature",
          "type": "object",
          "required": [
            "cabin",
            "outside"
          ],
          "properties": {
            "cabin": {
              "description": "Cabin temperature",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "[-30 - 85],224,225<br/> -30 to 85 : temperature<br/> 224 : Not determined<br/> 225 : Broken<br/> <br/> Default value : 224",
                  "type": "number",
                  "minimum": -30,
                  "maximum": 85,
                  "default": 224,
                  "example": 20
                },
                "unit": {
                  "description": "- c : Celsius (fixed)",
                  "type": "string",
                  "example": "c",
                  "enum": [
                    "c"
                  ]
                }
              }
            },
            "outside": {
              "description": "Outside temperature",
              "type": "object",
              "required": [
                "value",
                "unit"
              ],
              "properties": {
                "value": {
                  "description": "[-30 - 85],224,225<br/> -30 to 85 : temperature<br/> 224 : Not determined<br/> 225 : Broken<br/> <br/> Default value : 224",
                  "type": "number",
                  "minimum": -30,
                  "maximum": 85,
                  "default": 224,
                  "example": 20
                },
                "unit": {
                  "description": "- c : Celsius (fixed)",
                  "type": "string",
                  "example": "c",
                  "enum": [
                    "c"
                  ]
                }
              }
            }
          }
        },
        "doorStatus": {
          "description": "Door status",
          "type": "object",
          "required": [
            "firstRowDriver",
            "firstRowPassenger",
            "secondRowDriver",
            "secondRowPassenger",
            "hood",
            "trunk"
          ],
          "properties": {
            "firstRowDriver": {
              "description": "Door status (firstRowDriver)",
              "type": "object",
              "required": [
                "openState",
                "lockState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                },
                "lockState": {
                  "description": "Door lock knob/tab<br/> - lock : Door is locked<br/> - unlock : Door is unlocked<br/> - unknown : Impossible to determine the state of door lock<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "lock",
                    "unlock",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "lock"
                }
              }
            },
            "firstRowPassenger": {
              "description": "Door status (firstRowPassenger)",
              "type": "object",
              "required": [
                "openState",
                "lockState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                },
                "lockState": {
                  "description": "Door lock knob/tab<br/> - lock : Door is locked<br/> - unlock : Door is unlocked<br/> - unknown : Impossible to determine the state of door lock<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "lock",
                    "unlock",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "lock"
                }
              }
            },
            "secondRowDriver": {
              "description": "Door status (secondRowDriver)",
              "type": "object",
              "required": [
                "openState",
                "lockState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                },
                "lockState": {
                  "description": "Door lock knob/tab<br/> - lock : Door is locked<br/> - unlock : Door is unlocked<br/> - unknown : Impossible to determine the state of door lock<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "lock",
                    "unlock",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "lock"
                }
              }
            },
            "secondRowPassenger": {
              "description": "Door status (secondRowPassenger)",
              "type": "object",
              "required": [
                "openState",
                "lockState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                },
                "lockState": {
                  "description": "Door lock knob/tab<br/> - lock : Door is locked<br/> - unlock : Door is unlocked<br/> - unknown : Impossible to determine the state of door lock<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "lock",
                    "unlock",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "lock"
                }
              }
            },
            "hood": {
              "description": "Door status (hood)",
              "type": "object",
              "required": [
                "openState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                }
              }
            },
            "trunk": {
              "description": "Door status (trunk)",
              "type": "object",
              "required": [
                "openState"
              ],
              "properties": {
                "openState": {
                  "description": "Door switch<br/> - closed : Door is closed<br/> - open : Door is open<br/> - unknown : Impossible to determine the state of door switch<br/> <br/> Default value: unknown",
                  "type": "string",
                  "enum": [
                    "closed",
                    "open",
                    "unknown"
                  ],
                  "default": "unknown",
                  "example": "closed"
                }
              }
            }
          }
        },
        "lightStatus": {
          "description": "Light status",
          "type": "object",
          "required": [
            "headlights",
            "parkingLights",
            "brightLights",
            "fogLights",
            "rearFogLights"
          ],
          "properties": {
            "headlights": {
              "description": "Light status (headlights)",
              "type": "object",
              "required": [
                "lightState"
              ],
              "properties": {
                "lightState": {
                  "description": "- on: Light on<br/> - off: Light off<br/> - unknown: Impossible to determine the state of light state<br/> <br/> Default value: unknown",
                  "type": "string",
                  "example": "on",
                  "enum": [
                    "on",
                    "off",
                    "unknown"
                  ],
                  "default": "unknown"
                }
              }
            },
            "parkingLights": {
              "description": "Light status (parkingLights)",
              "type": "object",
              "required": [
                "lightState"
              ],
              "properties": {
                "lightState": {
                  "description": "- on: Light on<br/> - off: Light off<br/> - unknown: Impossible to determine the state of light state<br/> <br/> Default value: unknown",
                  "type": "string",
                  "example": "on",
                  "enum": [
                    "on",
                    "off",
                    "unknown"
                  ],
                  "default": "unknown"
                }
              }
            },
            "brightLights": {
              "description": "Light status (brightLights)",
              "type": "object",
              "required": [
                "lightState"
              ],
              "properties": {
                "lightState": {
                  "description": "- on: Light on<br/> - off: Light off<br/> - unknown: Impossible to determine the state of light state<br/> <br/> Default value: unknown",
                  "type": "string",
                  "example": "on",
                  "enum": [
                    "on",
                    "off",
                    "unknown"
                  ],
                  "default": "unknown"
                }
              }
            },
            "fogLights": {
              "description": "Light status (fogLights)",
              "type": "object",
              "required": [
                "lightState"
              ],
              "properties": {
                "lightState": {
                  "description": "- on: Light on<br/> - off: Light off<br/> - unknown: Impossible to determine the state of light state<br/> <br/> Default value: unknown",
                  "type": "string",
                  "example": "on",
                  "enum": [
                    "on",
                    "off",
                    "unknown"
                  ],
                  "default": "unknown"
                }
              }
            },
            "rearFogLights": {
              "description": "Light status (rearFogLights)",
              "type": "object",
              "required": [
                "lightState"
              ],
              "properties": {
                "lightState": {
                  "description": "- on: Light on<br/> - off: Light off<br/> - unknown: Impossible to determine the state of light state<br/> <br/> Default value: unknown",
                  "type": "string",
                  "example": "on",
                  "enum": [
                    "on",
                    "off",
                    "unknown"
                  ],
                  "default": "unknown"
                }
              }
            }
          }
        },
        "tireStatus": {
          "description": "Tire status",
          "type": "object",
          "required": [
            "frontRight",
            "frontLeft",
            "rearRight",
            "rearLeft"
          ],
          "properties": {
            "frontRight": {
              "description": "Tire status (frontRight)",
              "type": "object",
              "required": [
                "pressureData"
              ],
              "properties": {
                "pressureData": {
                  "description": "Pressure data",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "[0-400],510<br/> 0 to 400 : 0=Empty scale, 400=Full scale<br/> 510 : TCU has no valid value in memory<br/> <br/> Default value: 510",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 510,
                      "default": 510,
                      "example": 301
                    },
                    "unit": {
                      "description": "- kPa : kilo-pascal (fixed)",
                      "type": "string",
                      "example": "kPa",
                      "enum": [
                        "kPa"
                      ]
                    }
                  }
                }
              }
            },
            "frontLeft": {
              "description": "Tire status (frontLeft)",
              "type": "object",
              "required": [
                "pressureData"
              ],
              "properties": {
                "pressureData": {
                  "description": "Pressure data",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "[0-400],510<br/> 0 to 400 : 0=Empty scale, 400=Full scale<br/> 510 : TCU has no valid value in memory<br/> <br/> Default value: 510",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 510,
                      "default": 510,
                      "example": 302
                    },
                    "unit": {
                      "description": "- kPa : kilo-pascal (fixed)",
                      "type": "string",
                      "example": "kPa",
                      "enum": [
                        "kPa"
                      ]
                    }
                  }
                }
              }
            },
            "rearRight": {
              "description": "Tire status (rearRight)",
              "type": "object",
              "required": [
                "pressureData"
              ],
              "properties": {
                "pressureData": {
                  "description": "Pressure data",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "[0-400],510<br/> 0 to 400 : 0=Empty scale, 400=Full scale<br/> 510 : TCU has no valid value in memory<br/> <br/> Default value: 510",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 510,
                      "default": 510,
                      "example": 303
                    },
                    "unit": {
                      "description": "- kPa : kilo-pascal (fixed)",
                      "type": "string",
                      "example": "kPa",
                      "enum": [
                        "kPa"
                      ]
                    }
                  }
                }
              }
            },
            "rearLeft": {
              "description": "Tire status (rearLeft)",
              "type": "object",
              "required": [
                "pressureData"
              ],
              "properties": {
                "pressureData": {
                  "description": "Pressure data",
                  "type": "object",
                  "required": [
                    "value",
                    "unit"
                  ],
                  "properties": {
                    "value": {
                      "description": "[0-400],510<br/> 0 to 400 : 0=Empty scale, 400=Full scale<br/> 510 : TCU has no valid value in memory<br/> <br/> Default value: 510",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 510,
                      "default": 510,
                      "example": 304
                    },
                    "unit": {
                      "description": "- kPa : kilo-pascal (fixed)",
                      "type": "string",
                      "example": "kPa",
                      "enum": [
                        "kPa"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "remoteEngineStart": {
          "description": "Remote Engine Start information",
          "type": "object",
          "required": [
            "vehicleStartEvent"
          ],
          "properties": {
            "vehicleStartEvent": {
              "description": "Last event of RemoteEngineStart. Not set this value when there is no RemoteEngineStart request.<br/> * Notice: Even if this value is set, it may not be in the RES.",
              "type": "object",
              "required": [
                "resStartCounter",
                "resTime",
                "resRequester",
                "resStatus"
              ],
              "properties": {
                "resStartCounter": {
                  "description": "RES success counter value<br/> *Reset this counter to 0 when IG-ON.",
                  "type": "number",
                  "format": "int32",
                  "minimum": 0,
                  "maximum": 2,
                  "example": 2
                },
                "resTime": {
                  "description": "Engine operation remaining time (unit: min)<br/> - 0: 00'00<br/> - 1: 01'00 ~ 00'01<br/> ...<br/> - 9: 09'00 ~ 08'01<br/> - 10: 10'00 ~ 09'01<br/> ...",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 63,
                  "example": 0
                },
                "resRequester": {
                  "description": "RES Requestor.<br/> - 0x00: EXTRES No reception / Other<br/> - 0x18: BCM RES<br/> - 0x91: TCU<br/> - 0xB8: BLUE TOOTH<br/> - 0x98: YOPRES",
                  "type": "string",
                  "minLength": 4,
                  "maxLength": 4,
                  "example": "0x91",
                  "enum": [
                    "0x00",
                    "0x18",
                    "0x91",
                    "0xB8",
                    "0x98"
                  ]
                },
                "resStatus": {
                  "description": "[1 - 13], 99<br/> Power mode state.<br/> - 0: Power OFF<br/> - 4: RES_IG_RUN mode (During RES)<br/> - 5: RES_IG_RUN_WAIT mode (During RES)<br/> - 99: Other<br/> * 1 - 3, 6 - 13: Power mode ON",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 99,
                  "example": 1
                }
              }
            },
            "delayStart": {
              "description": "Set between acceptance and termination of delayStart request.",
              "type": "object",
              "required": [
                "delayStartTime"
              ],
              "properties": {
                "delayStartTime": {
                  "description": "Delay engine start time. (UTC Time, RFC3339) (YYYY-MM-DDTHH:MM:SS+00:00)",
                  "type": "string",
                  "example": "2017-06-30T12:50:00+00:00",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$"
                }
              }
            }
          }
        },
        "warningLamps": {
          "description": "Warning Lamps",
          "type": "object",
          "required": [
            "languageCode",
            "messages"
          ],
          "properties": {
            "languageCode": {
              "description": "Language code (RFC3066)",
              "type": "string",
              "maxLength": 7,
              "default": "en",
              "example": "en"
            },
            "messages": {
              "description": "If the element is empty it means there is no message.",
              "type": "array",
              "maxItems": 50,
              "items": {
                "type": "object",
                "required": [
                  "lampName",
                  "condition",
                  "titleString",
                  "messageString"
                ],
                "properties": {
                  "lampName": {
                    "description": "Name of lit warning lamp.",
                    "type": "string",
                    "maxLength": 200,
                    "example": "aaa"
                  },
                  "condition": {
                    "description": "Condition (Hexadecimal)",
                    "type": "string",
                    "maxLength": 5,
                    "example": "11"
                  },
                  "titleString": {
                    "description": "Warning lamp title.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "Brake System Problem"
                  },
                  "messageString": {
                    "description": "Warning lamp message.",
                    "type": "string",
                    "maxLength": 4000,
                    "example": "The brake system has a problem."
                  }
                }
              }
            }
          }
        },
        "maintenanceMinder": {
          "type": "object",
          "required": [
            "languageCode",
            "messages"
          ],
          "properties": {
            "languageCode": {
              "description": "Language code (RFC3066)  Default value: en\n",
              "type": "string",
              "maxLength": 7,
              "example": "en"
            },
            "messages": {
              "description": "If the element is empty it means there is no message.",
              "type": "array",
              "maxItems": 16,
              "items": {
                "type": "object",
                "required": [
                  "mmCode",
                  "mmString"
                ],
                "properties": {
                  "mmCode": {
                    "description": "MM code.",
                    "type": "string",
                    "maxLength": 1,
                    "example": "A"
                  },
                  "mmString": {
                    "description": "Maintenance informaiton.",
                    "type": "string",
                    "maxLength": 4000,
                    "example": "Replace engine oil"
                  }
                }
              }
            }
          }
        },
        "windowStatus": {
          "description": "Window status",
          "type": "object",
          "required": [
            "frontWindowDR",
            "frontWindowAS",
            "rearWindowRR",
            "rearWindowRL"
          ],
          "properties": {
            "frontWindowDR": {
              "description": "Window status (frontWindowDR)",
              "type": "object",
              "required": [
                "closeState"
              ],
              "properties": {
                "closeState": {
                  "description": "Window switch driver seat - off : Window is open - on : Window is closed - unknown : Impossible to determine the state of window switch Default value: unknown\n",
                  "type": "string",
                  "example": "closed",
                  "enum": [
                    "off",
                    "on",
                    "unknown"
                  ]
                }
              }
            },
            "frontWindowAS": {
              "description": "Window status (frontWindowAS)",
              "type": "object",
              "required": [
                "closeState"
              ],
              "properties": {
                "closeState": {
                  "description": "Window switch assistant seat - off : Window is open - on : Window is closed - unknown : Impossible to determine the state of window switch Default value: unknown\n",
                  "type": "string",
                  "example": "closed",
                  "enum": [
                    "off",
                    "on",
                    "unknown"
                  ]
                }
              }
            },
            "rearWindowRR": {
              "description": "Window status (rearWindowRR)",
              "type": "object",
              "required": [
                "closeState"
              ],
              "properties": {
                "closeState": {
                  "description": "Window switch rear right seat - off : Window is open - on : Window is closed - unknown : Impossible to determine the state of window switch Default value: unknown\n",
                  "type": "string",
                  "example": "closed",
                  "enum": [
                    "off",
                    "on",
                    "unknown"
                  ]
                }
              }
            },
            "rearWindowRL": {
              "description": "Window status (rearWindowRL)",
              "type": "object",
              "required": [
                "closeState"
              ],
              "properties": {
                "closeState": {
                  "description": "Window switch rear left seat - off : Window is open - on : Window is closed - unknown : Impossible to determine the state of window switch Default value: unknown\n",
                  "type": "string",
                  "example": "closed",
                  "enum": [
                    "off",
                    "on",
                    "unknown"
                  ]
                }
              }
            }
          }
        },
        "evStatus": {
          "type": "object",
          "required": [
            "soc",
            "evRange",
            "totalRange",
            "rangeUnit",
            "evClimateOffRange",
            "tzone",
            "preacStatus",
            "acDefStatus",
            "acVariation",
            "chargeStatus",
            "chargeMode",
            "imsi",
            "timeToTargetSoc",
            "plugStatus",
            "evseStatus",
            "intTemp",
            "igStatus",
            "timerTzone",
            "timerGpsReceive",
            "eneoutStatus",
            "eneoutRemainingTime",
            "eneoutConsumption",
            "eneoutStopCode",
            "warmStatus",
            "chargeProhibitionTimerSettings",
            "acTimerSettings",
            "acDurationSetting",
            "acTempVal",
            "acTotalTime",
            "acDefAutoSetting",
            "acDefManualSetting",
            "chargeLimitHome",
            "chargeLimitAway",
            "homeAway",
            "energyFlowAc",
            "energyFlowAcsocket",
            "cableInfo",
            "energyFlowCable",
            "energyFlowBatt",
            "chargeMessage",
            "preacRemainingTime",
            "showWarmStatus"
          ],
          "properties": {
            "soc": {
              "description": "SOC. - 0 - 100 : 0 - 100 [%] in increments of 1 % - 254 : Before unreceived and before communication failed - 255 : Communication failed - -1 : Impossible to determine the state of SOC Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 255,
              "example": -1
            },
            "evRange": {
              "description": "Available driving distance (EV). - 0 - 2044 : distance - 2045 : distance is 2045 or more - 2046 : Data before first receieved - 2047 : Undefined value - -1 : Impossible to determine the state of EV range Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 2047,
              "example": -1
            },
            "totalRange": {
              "description": "Available driving distance (TOTAL). - 0 - 2045 : distance - 2046 : No display - 2047 : ”－－－－” - -1 : Impossible to determine the state of total range Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 2047,
              "example": -1
            },
            "rangeUnit": {
              "description": "Available driving distance unit. - km : Kilometer - mile : Mile - unknown : Impossible to determine the state of range unit Default value: unknown\n",
              "type": "string",
              "example": "km",
              "enum": [
                "km",
                "mile",
                "unknown"
              ]
            },
            "evClimateOffRange": {
              "description": "Available driving distance when AC is OFF (EV). - 0 - 2044 : distance - 2045 : distance is 2045 or more - 2046 : Data before first receieved - 2047 : Undefined value - -1 : Impossible to determine the state of EV climate off range Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 2047,
              "example": -1
            },
            "tzone": {
              "description": "- UTC : Coordinated Universal Time (fixed)",
              "type": "string",
              "example": "UTC",
              "enum": [
                "UTC"
              ]
            },
            "preacStatus": {
              "description": "Pre AC operating status. - 0 : Stopped - 1 : Pre AC in progress - 2 : Pre AC not possible to start - unknown : Impossible to determine the state of Pre AC status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "unknown"
              ]
            },
            "acDefStatus": {
              "description": "AC defroster status. 0 : Unconfirmed 1 : MANUAL DEF 2 : MANUAL H/D 3 : MANUAL HEAT 4 : MANUAL B/L 5 : MANUAL VENT 6 : AUTO DEF 7 : AUTO H/D 8 : AUTO HEAT 9 : AUTO B/L 10 : AUTO VENT 11 : Not used 15 : Not used - unknown : Impossible to determine the state of AC defroster status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "15",
                "unknown"
              ]
            },
            "acVariation": {
              "description": "AC variation. 0 : Unconfirmed 1 : Single　A/C 2 : Dual　A/C 3 : Manual　A/C - unknown : Impossible to determine the state of AC variation Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "unknown"
              ]
            },
            "chargeStatus": {
              "description": "Charge status. - 0 : Stopped - 1 : Charge in progress - 2 : Charge not possible to start - unknown : Impossible to determine the state of Charge status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "unknown"
              ]
            },
            "chargeMode": {
              "description": "Charge mode. - 0 : Unconfirmed - 1 : Charge at 100 V - 2 : Charge at 200 V - 3 : Rapid charging - unknown : Impossible to determine the state of charge mode Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "unknown"
              ]
            },
            "imsi": {
              "description": "IMSI of communication module. Invalid value : 999999999999999\n",
              "type": "string",
              "example": "123456789012345",
              "maxLength": 15,
              "pattern": "^\\d{1,15}$"
            },
            "timeToTargetSoc": {
              "description": "Estimated time to charge capacity specified value. - 0 - 1023 : min - 1 : Impossible to determine the state of time to target SOC Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 1023,
              "example": -1
            },
            "plugStatus": {
              "description": "Plug-in status. - 0 : EV is plugged out - 1 : EV is plugged in - unknown : Impossible to determine the state of plug status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "evseStatus": {
              "description": "EVSE status. - 0 : OFF - 1 : ON - unknown : Impossible to determine the state of EVSE status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "intTemp": {
              "description": "Car interior temperature. - -30 - 85 : degree Celsius in increments of 1°C - 224 : Initial value or undefined value - 225 : Sensor error - -1 : Impossible to determine the state of interior temperature status Default value: -1\n",
              "type": "number",
              "minimum": -30,
              "maximum": 225,
              "example": -1
            },
            "igStatus": {
              "description": "Ignition status. - 0 : IG OFF or ACC - 1 : IG ON - unknown : Impossible to determine the state of IG status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "timerTzone": {
              "description": "Meter time zone. - 0 - 127 : UTC -16:00 - UTC +15:45 (increments of 00:15) - -1 : Impossible to determine the state of time zone Default value: -1\n",
              "type": "number",
              "minimum": -1,
              "maximum": 127,
              "example": -1
            },
            "timerGpsReceive": {
              "description": "METER recognition clock accuracy information. - 0 : Less than 30 days after GPS recieved - 1 : GPS not received or more than 30 days passed since GPS receieved - unknown : Impossible to determine the state of timer GPS Receive Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "eneoutStatus": {
              "description": "Eneout status. - 0 : Stopped - 1 : Eneout in progress - unknown : Impossible to determine the state of eneout status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "eneoutRemainingTime": {
              "description": "Eneout available time. Unit is hour. - -1 : Impossible to determine the state of eneout remaining time Default value: -1\n",
              "type": "number",
              "example": 1,
              "minimum": -1,
              "maximum": 255
            },
            "eneoutConsumption": {
              "description": "Power consumption during eneout.  - 00 - 127 : 0.0 - 12.7 [kW] in increments of 0.1 kW - -1 : Impossible to determine the state of eneout consumption Default value: -1\n",
              "type": "number",
              "example": 1,
              "minimum": -1,
              "maximum": 127
            },
            "eneoutStopCode": {
              "description": "Reason for stopping eneout system. - 0 : Nomal stop - 1 - 7 : Exception stop code - unknown : Impossible to determine the state of eneout stop code Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "unknown"
              ]
            },
            "warmStatus": {
              "description": "Warm status. - 0 : Stopped - 1 : Warm in progress - unknown : Impossible to determine the state of warm status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "chargeProhibitionTimerSettings": {
              "description": "2 elements.",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "object",
                "required": [
                  "chargeProhibitionDayOfWeek",
                  "chargeProhibitionTimerCommand",
                  "chargeProhibitionLocation",
                  "chargeProhibitionTimerOption"
                ],
                "properties": {
                  "chargeProhibitionDayOfWeek": {
                    "description": "Day of the week to set charging prohibited.  Multiple Day are selectable. Cannot select twice Day of the week. Ex)If Mon & Wed & Fri are selected,the value will be \"mon,wed,fri\". - invalid : Invalid value Default value: invalid",
                    "type": "string",
                    "enum": [
                      "DAY,DAY,…,DAY",
                      "invalid"
                    ],
                    "example": "mon,tue"
                  },
                  "chargeProhibitionTimerCommand": {
                    "description": "- off : Cancel the timer - time : Charging prohibition in time - invalid : Invalid value Default value: invalid",
                    "type": "string",
                    "example": "time",
                    "enum": [
                      "off",
                      "time",
                      "invalid"
                    ]
                  },
                  "chargeProhibitionLocation": {
                    "description": "- home : Home only - all : Home & Away - invalid : Invalid value Default value: invalid",
                    "type": "string",
                    "example": "home",
                    "enum": [
                      "home",
                      "all",
                      "invalid"
                    ]
                  },
                  "chargeProhibitionTimerOption": {
                    "type": "object",
                    "description": "Charge Prohibition Timer Option",
                    "required": [
                      "chargeProhibitionStartTime",
                      "chargeProhibitionEndTime"
                    ],
                    "properties": {
                      "chargeProhibitionStartTime": {
                        "description": "Charging prohibition start time. - 9999 : Invalid Value Default value: 9999\n",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1244"
                      },
                      "chargeProhibitionEndTime": {
                        "description": "Charging prohibition end time. - 9999 : Invalid Value Default value: 9999\n",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1320"
                      }
                    }
                  }
                }
              }
            },
            "acTimerSettings": {
              "description": "7 elements.",
              "type": "array",
              "minItems": 7,
              "maxItems": 7,
              "items": {
                "type": "object",
                "required": [
                  "acDayOfWeek",
                  "acTimerCommand",
                  "acTimerOption"
                ],
                "properties": {
                  "acDayOfWeek": {
                    "description": "Day of the week to set charging prohibited.  Multiple Day are selectable. Cannot select twice Day of the week. Ex)If Mon & Wed & Fri are selected,the value will be \"mon,wed,fri\". - invalid : Invalid value Default value: invalid",
                    "type": "string",
                    "enum": [
                      "DAY,DAY,…,DAY",
                      "invalid"
                    ],
                    "example": "mon,tue"
                  },
                  "acTimerCommand": {
                    "description": "- off : Cancel the timer - timer : Set the timer - invalid : Invalid value Default value: invalid",
                    "type": "string",
                    "example": "time",
                    "enum": [
                      "off",
                      "timer",
                      "invalid"
                    ]
                  },
                  "acTimerOption": {
                    "type": "object",
                    "description": "AC Timer Option",
                    "required": [
                      "acStartTime1",
                      "acStartTime2"
                    ],
                    "properties": {
                      "acStartTime1": {
                        "description": "AC start time 1. - 9999 : Invalid value  Default value: 9999\n",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1244"
                      },
                      "acStartTime2": {
                        "description": "AC start time 2. - 9999 : Invalid value Default value: 9999\n",
                        "type": "string",
                        "minLength": 4,
                        "maxLength": 4,
                        "example": "1320"
                      }
                    }
                  }
                }
              }
            },
            "acDurationSetting": {
              "description": "AC runing period. (Ex. acDurationSetting=10 means that keep AC running for 10 minutes) Max 30 minutes. - 0 : Not specified - unknown : Impossible to determine the state of AC duration setting Default value: unknown\n",
              "type": "string",
              "example": "10",
              "enum": [
                "0",
                "10",
                "20",
                "30",
                "unknown"
              ]
            },
            "acTempVal": {
              "description": "Temperature setting. - 00: Not specified - 01: Hi - 02: Lo - 03: TEMP Mode \"WARM\" - 04: TEMP Mode \"NORMAL\" - 05: TEMP Mode \"COOL\" - 0A～2A: 15.5～31.5[°C] in increments of 0.5°C - 30～4C: 58～86[°F] in increments of 1°F - unknown : Impossible to determine the state of AC temperature value Default value: unknown\n",
              "type": "string",
              "example": "00",
              "enum": [
                "00",
                "01",
                "02",
                "03",
                "04",
                "05",
                "0A",
                "0B",
                "0C",
                "0D",
                "0E",
                "0F",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "1A",
                "1B",
                "1C",
                "1D",
                "1E",
                "1F",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "2A",
                "30",
                "31",
                "32",
                "33",
                "34",
                "35",
                "36",
                "37",
                "38",
                "39",
                "3A",
                "3B",
                "3C",
                "3D",
                "3E",
                "3F",
                "40",
                "41",
                "42",
                "43",
                "44",
                "45",
                "46",
                "47",
                "48",
                "49",
                "4A",
                "4B",
                "4C",
                "unknown"
              ]
            },
            "acTotalTime": {
              "description": "AC extension time or total running time. - 0 : Not specified - unknown : Impossible to determine the state of AC total time Default value: unknown\n",
              "type": "string",
              "example": "10",
              "enum": [
                "0",
                "10",
                "20",
                "unknown"
              ]
            },
            "acDefAutoSetting": {
              "description": "Defroster interlocking (ON / OFF) setting by automatic. - notSpecified : Not specified the auto defroster - autoOn : Turn on the defroster - autoOff : Turn off the defroster - unknown : Impossible to determine the state of AC defroster automatic setting Default value: unknown\n",
              "type": "string",
              "example": "notSpecified",
              "enum": [
                "notSpecified",
                "autoOn",
                "autoOff",
                "unknown"
              ]
            },
            "acDefManualSetting": {
              "description": "Defroster interlocking (ON / OFF) setting by manual. - notSpecified : Not specified the manual defroster - manualOn : Turn on the defroster - manualOff : Turn off the defroster - unknown : Impossible to determine the state of AC defroster auto setting Default value: unknown\n",
              "type": "string",
              "example": "00",
              "enum": [
                "notSpecified",
                "manualOn",
                "manualOff",
                "unknown"
              ]
            },
            "chargeLimitHome": {
              "description": "Maximum charging capacity. Unit is percent(%). - 0 : Not specified - -1 : Impossible to determine the state of charge limit home Default value: -1\n",
              "type": "number",
              "example": 30,
              "minimum": -1,
              "maximum": 100
            },
            "chargeLimitAway": {
              "description": "Maximum charging capacity. Unit is percent(%). - 0 : Not specified - -1 : Impossible to determine the state of charge limit away Default value: -1\n",
              "type": "number",
              "example": 30,
              "minimum": -1,
              "maximum": 100
            },
            "homeAway": {
              "description": "HOME / AWAY judgment value. - 0 : Can not be determined - 1 : HOME - 2 : AWAY - unknown : Impossible to determine the state of home / away judgement value Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "unknown"
              ]
            },
            "energyFlowAc": {
              "description": "Energy flow (A/C). - 0 : A/C OFF (including unknown) - 1 : A/C ON (in progress) - unknown : Impossible to determine the state of energy flow AC Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "energyFlowAcsocket": {
              "description": "Energy flow (AC socket). - 0 : A/C socket OFF (including unknown) - 1 : A/C scket ON (in progress) - unknown : Impossible to determine the state of energy flow AC socket Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            },
            "cableInfo": {
              "description": "Energy flow (Cable). - 0 : Indeterminate value - 1 : Charge in progress - 2 : Eneout in progress - 3 : Bidirectional - unknown : Impossible to determine the state of energy flow Cable Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "unknown"
              ]
            },
            "energyFlowCable": {
              "description": "Energy flow (Cable). - 0 : No action - 1 : Charge in progress - 2 : Eneout in progress - unknown : Impossible to determine the state of energy flow cable Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "unknown"
              ]
            },
            "energyFlowBatt": {
              "description": "Energy flow (Battery). - 0 : No action - 1 : Charge in progress - 2 : Eneout in progress - unknown : Impossible to determine the state of energy flow battery Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "unknown"
              ]
            },
            "chargeMessage": {
              "description": "Charge message. 0: No display 1: Remaining charge time [HH:MM] 2: Calculating remaining charge time 3: Charging will end soon 4: 24 hours or more 5: Charging is complete 6: Charging stopped 7: Power consumption is high. - unknown : Impossible to determine the state of charge message Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "unknown"
              ]
            },
            "preacRemainingTime": {
              "description": "Pre AC remaining time. - 00 : Invalid value - 01 : 1 min or less ... - 30 : 30 min or less - 31 : Pre AC is not in progress - -1 : Impossible to determine the state of pre AC remaining time Default value: -1\n",
              "type": "number",
              "example": -1,
              "minimum": -1,
              "maximum": 31
            },
            "showWarmStatus": {
              "description": "Show warm status. - 0 : Show OFF request - 1 : Show ON request - unknown : Impossible to determine the state of show warm status Default value: unknown\n",
              "type": "string",
              "example": "0",
              "enum": [
                "0",
                "1",
                "unknown"
              ]
            }
          }
        }
      }
    },
    "DashboardResultHistoryResponse": {
      "description": "Dashboard Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure - W001: Order condition is not established - W002: Can not execute because PPP restriction mode - W003: Executed the order, but it did not succeed - W101: Timeout - E101: Invalid Parameter - E201: TCU Processing Error - E900: Another Error\n",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "SmsResultNotificationsRequest": {
      "description": "Sms Result Notifications - Request Body",
      "type": "object",
      "required": [
        "notifyType",
        "notifyPayload"
      ],
      "properties": {
        "transId": {
          "description": "Transaction id used for the result of a specific request received earlier",
          "type": "string",
          "example": "abc123"
        },
        "notifyType": {
          "description": "Type of notification",
          "type": "string",
          "enum": [
            "SMS_SENT"
          ],
          "example": "SMS_SENT"
        },
        "notifyPayload": {
          "description": "Notify Pay Load",
          "type": "object",
          "required": [
            "smsSent"
          ],
          "properties": {
            "smsSent": {
              "description": "Sms Sent Info",
              "type": "object",
              "required": [
                "iccid",
                "msisdn",
                "deliveryStatus",
                "timeStamp"
              ],
              "properties": {
                "iccid": {
                  "description": "SIM ICCID (globally unique identifier)",
                  "type": "string",
                  "maxLength": 20,
                  "minLength": 20,
                  "pattern": "^\\d{20,20}$",
                  "example": "12345678901234567890"
                },
                "msisdn": {
                  "description": "MSISDN (globally unique identifier)",
                  "type": "string",
                  "maxLength": 15,
                  "minLength": 10,
                  "pattern": "^\\d{10,15}$",
                  "example": "1234567890"
                },
                "deliveryStatus": {
                  "description": "Provides progress status on SMS delivery",
                  "type": "string",
                  "enum": [
                    "Delivered",
                    "Failed"
                  ],
                  "example": "Delivered"
                },
                "timeStamp": {
                  "description": "Timestamp of event(RFC3339 format)",
                  "type": "string",
                  "maxLength": 30,
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                  "example": "2017-03-22T00:00:00+00:00"
                },
                "deliveryCode": {
                  "description": "Failure cause code",
                  "type": "string"
                },
                "deliveryDesc": {
                  "description": "Failure cause message description",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "GetNaviSpotListResponse": {
      "description": "GetNaviSpotList response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "GetNaviSpotList"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "spot": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "spotListCount": {
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "1"
                    },
                    "spotList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "globalId": {
                            "description": "GlobalId",
                            "type": "string",
                            "pattern": "\\d+",
                            "minLength": 16,
                            "maxLength": 16,
                            "example": "1234567890123456"
                          },
                          "productOwnId": {
                            "description": "ProductOwnId",
                            "type": "string",
                            "pattern": "\\d+",
                            "minLength": 16,
                            "maxLength": 16,
                            "example": "1234567890123456"
                          },
                          "spotId": {
                            "type": "string",
                            "pattern": "\\d+",
                            "minLength": 16,
                            "maxLength": 16,
                            "example": "1234567890123456"
                          },
                          "spotName": {
                            "type": "string",
                            "maxLength": 80,
                            "example": "aaa"
                          },
                          "longitude": {
                            "description": "Degree",
                            "type": "string",
                            "pattern": "\\d+(\\.\\d+)?",
                            "example": "139.607271"
                          },
                          "latitude": {
                            "description": "Degree",
                            "type": "string",
                            "pattern": "\\d+(\\.\\d+)?",
                            "example": "35.7897958"
                          },
                          "altitude": {
                            "type": "string",
                            "pattern": "\\d+",
                            "example": "20"
                          },
                          "address": {
                            "type": "string",
                            "maxLength": 320,
                            "example": "aaa"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "maxLength": 20,
                            "example": "090********"
                          },
                          "spotURL": {
                            "type": "string",
                            "maxLength": 100,
                            "example": "http://www.xxx.jp"
                          },
                          "spotComment": {
                            "type": "string",
                            "maxLength": 200,
                            "example": "aaa"
                          },
                          "readName": {
                            "type": "string",
                            "maxLength": 70,
                            "example": "aaa"
                          },
                          "createDate": {
                            "description": "YYYY-mm-dd hh:mm:ss",
                            "type": "string",
                            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                            "example": "2015-07-30 05:26:16"
                          },
                          "updateDate": {
                            "description": "YYYY-mm-dd hh:mm:ss",
                            "type": "string",
                            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                            "example": "2015-07-30 05:26:16"
                          },
                          "fbPlaceId": {
                            "description": "This parameter is only for Pins. The case of My Spot, the parameter is \"\"(blank).",
                            "type": "string",
                            "maxLength": 128,
                            "example": ""
                          },
                          "fsVenueId": {
                            "description": "This parameter is only for Pins. The case of My Spot, the parameter is \"\"(blank).",
                            "type": "string",
                            "maxLength": 128,
                            "example": ""
                          },
                          "checkInCount": {
                            "description": "This parameter is only for Pins. The case of My Spot, the parameter is \"\"(blank).",
                            "type": "string",
                            "example": ""
                          },
                          "naviSyncFlg": {
                            "description": "0: Not synchronized with A-DA | 1: Synchronized with A-DA",
                            "type": "string",
                            "enum": [
                              "0",
                              "1"
                            ],
                            "example": "1"
                          },
                          "productName": {
                            "description": "This parameter is not for A-DA.",
                            "type": "string",
                            "maxLength": 200,
                            "example": ""
                          },
                          "vehcleNickname": {
                            "description": "This parameter is not for A-DA.",
                            "type": "string",
                            "maxLength": 200,
                            "example": ""
                          },
                          "externalSite": {
                            "description": "Identification string of external sites",
                            "type": "string",
                            "maxLength": 10,
                            "example": "HONDA_DOG"
                          },
                          "relURL": {
                            "description": "URL of external site.",
                            "type": "string",
                            "maxLength": 300,
                            "example": "http://www.honda.co.jp/dog/"
                          },
                          "category": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "categoryListCount": {
                                  "type": "string",
                                  "pattern": "\\d+",
                                  "example": "1"
                                },
                                "categoryList": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "categoryId": {
                                        "type": "string",
                                        "pattern": "\\d+",
                                        "maxLength": 16,
                                        "example": "1234567890123456"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "categoryListCount": {
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "1"
                    },
                    "categoryList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "globalId": {
                            "description": "GlobalId",
                            "type": "string",
                            "pattern": "\\d+",
                            "minLength": 16,
                            "maxLength": 16,
                            "example": "1234567890123456"
                          },
                          "categoryId": {
                            "type": "string",
                            "pattern": "\\d+",
                            "maxLength": 16,
                            "example": "1110100000000001"
                          },
                          "categoryName": {
                            "type": "string",
                            "maxLength": 64,
                            "example": "aaa"
                          },
                          "categoryComment": {
                            "type": "string",
                            "maxLength": 320,
                            "example": "aaa"
                          },
                          "extendedImageId": {
                            "description": "${globalId} + \"_\" + ${imageId}",
                            "type": "string",
                            "pattern": "\\d+",
                            "example": "1110041110102948_1110040000000001"
                          },
                          "categoryType": {
                            "description": "0:default tag | 1: user tag",
                            "type": "string",
                            "pattern": "\\d+",
                            "example": "1"
                          },
                          "spotCount": {
                            "type": "string",
                            "pattern": "\\d+",
                            "example": "1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BulkRegisterNaviSpotRequest": {
      "description": "BulkRegisterNaviSpot response",
      "type": "object",
      "required": [
        "globalId",
        "productOwnId",
        "operation",
        "serviceType",
        "spotList"
      ],
      "properties": {
        "globalId": {
          "description": "GlobalId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000001"
        },
        "productOwnId": {
          "description": "ProductOwnId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000002"
        },
        "operation": {
          "description": "0: Create | 1: Update",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "serviceType": {
          "description": "0: My Spot (KJ) | 1: Pins (Others: KZ etc) ",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "bulkRegisterFlag": {
          "description": "0: Normal | 1: Bulk mode | null: Set default value(0) on server side.</br> In the case of bulk mode, run the tying process with the point in a subsequent batch process.",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "spotList": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "requestSeq"
            ],
            "properties": {
              "requestSeq": {
                "description": "For each My spot data of registration and updated, set a sequential number from 1 by requester.",
                "type": "string",
                "example": "1"
              },
              "spotId": {
                "description": "Set only to update spot info.Case [Register]:Empty; Case [Update]: Mandatory.",
                "type": "string",
                "maxLength": 16,
                "example": "1"
              },
              "spotName": {
                "description": "Case [Register]:Mandatory; Case [Update]:Optional (null).",
                "type": "string",
                "maxLength": 80,
                "example": "abc"
              },
              "daum": {
                "description": "Case [Register]:Mandatory; Case [Update]:Optional (null).",
                "type": "string",
                "enum": [
                  {
                    "0": "WGS84"
                  },
                  {
                    "1": "GRS80"
                  },
                  {
                    "2": "WGS83"
                  }
                ],
                "example": "0"
              },
              "latitude": {
                "description": "Degree.Case [Register]:Mandatory; Case [Update]:Optional (null).",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "35.7897958"
              },
              "longitude": {
                "description": "Degree.Case [Register]:Mandatory; Case [Update]:Optional (null).",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "139.607271"
              },
              "altitude": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "pattern": "\\d+",
                "example": "20"
              },
              "spotURL": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "maxLength": 100,
                "example": "http://www.xxx.jp"
              },
              "address": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "maxLength": 320,
                "example": "aaa"
              },
              "phoneNumber": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "maxLength": 20,
                "example": "045-***-****\","
              },
              "spotComment": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "maxLength": 200,
                "example": "TDL"
              },
              "naviSyncFlg": {
                "description": "0: Not synchronized with A-DA | 1: Synchronized with A-DA",
                "type": "string",
                "enum": [
                  "0",
                  "1"
                ],
                "example": "1"
              },
              "readName": {
                "description": "[Register] If not used, set \"\"(blank) into this parameter",
                "type": "string",
                "maxLength": 70,
                "example": "aaa"
              },
              "categoryList": {
                "description": "[My Spot] A spot can not be associated with multiple categories.</br> [Pins] A pin can be associated with multiple tags (categories). In the above case, set comma separated integers.",
                "type": "string",
                "maxLength": 16,
                "pattern": "\\d+",
                "example": "1110100009210001"
              },
              "visitSpotId": {
                "type": "string",
                "maxLength": 16,
                "pattern": "\\d+",
                "example": ""
              },
              "fbPlaceId": {
                "description": "This parameter is for Pins. In case of My Spot, set null.",
                "type": "string",
                "maxLength": 128,
                "example": ""
              },
              "fsVenueId": {
                "description": "This parameter is for Pins. In case of My Spot, set null.",
                "type": "string",
                "maxLength": 128,
                "example": ""
              },
              "externalSite": {
                "description": "External site identifier.This parameter is for My Spot.",
                "type": "string",
                "maxLength": 10,
                "example": ""
              },
              "relURL": {
                "description": "External site URL.This parameter is for My Spot.",
                "type": "string",
                "maxLength": 300,
                "example": ""
              }
            }
          }
        }
      }
    },
    "BulkRegisterNaviSpotResponse": {
      "description": "BulkRegisterNaviSpot response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "BulkRegisterNaviSpot"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "spotListCount": {
                "description": "Number of spots that are included in spotList",
                "type": "string",
                "maxLength": 4,
                "pattern": "\\d+",
                "example": "1"
              },
              "spotList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "requestSeq": {
                      "description": "requestSeq was set at the time of request",
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "1"
                    },
                    "spotId": {
                      "description": "Spot ID",
                      "type": "string",
                      "pattern": "\\d+",
                      "minLength": 16,
                      "maxLength": 16,
                      "example": "1234567890123456"
                    },
                    "registerResult": {
                      "description": "Processing result code of each spot.In the case of succcess, it is 100.",
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "100"
                    },
                    "errorItemName": {
                      "description": "The name of the request parameter that caused the error. </br> It is returned only if a single parameter error.",
                      "type": "string",
                      "example": "aaa"
                    },
                    "spotName": {
                      "description": "[If registerResult = 100]Return the new registered value.</br> [If registerResult = 220(Data is still existing)]Return the registered value.</br> [Otherwise]No return.",
                      "type": "string",
                      "maxLength": 80,
                      "example": "abc"
                    },
                    "latitude": {
                      "description": "Degree",
                      "type": "string",
                      "pattern": "\\d+(\\.\\d+)?",
                      "example": "35.7897958"
                    },
                    "longitude": {
                      "description": "Degree",
                      "type": "string",
                      "pattern": "\\d+(\\.\\d+)?",
                      "example": "139.607271"
                    },
                    "naviSyncFlg": {
                      "description": "[If registerResult = 100]Return the new registered value.</br> [If registerResult = 220(Data is still existing)]Return the registered value.</br> [Otherwise]No return.",
                      "type": "string",
                      "enum": [
                        "0",
                        "1"
                      ],
                      "example": "1"
                    }
                  }
                }
              },
              "exceededCount": {
                "description": "The number of that exceeded the upper limit of registration</br> [MySpot] 20 / [Pins] 15</br> Return only in the case of HTTP Response Header “X-Status-Code” is 228.",
                "type": "string",
                "pattern": "\\d+",
                "example": "400"
              }
            }
          }
        }
      }
    },
    "DeleteNaviSpotResponse": {
      "description": "DeleteNaviSpot response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "DeleteNaviSpot"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "spotId": {
                "description": "The deleted spotId, returned in comma-separated.",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              },
              "deletedSpotCount": {
                "description": "Deleted MySpot(Pins) number.",
                "type": "string",
                "pattern": "\\d+",
                "example": "1"
              }
            }
          }
        }
      }
    },
    "GetVisitedSpotListResponse": {
      "description": "GetVisitedSpotList response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "GetVisitedSpotList"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "visitSpotName": {
                "type": "string",
                "maxLength": 320,
                "example": "aaa"
              },
              "visitSpotNameRead": {
                "type": "string",
                "maxLength": 70,
                "example": "aaa"
              },
              "visitSpotAddress": {
                "type": "string",
                "maxLength": 1000,
                "example": "aaa"
              },
              "lastVisitDateTime": {
                "description": "Sort descending by this item when input parameter sortType = 1 (yyyy-MM-dd HH:mm:ss)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                "example": "2018-01-02 03:04:05"
              },
              "visitCount": {
                "description": "Sort descending by this item when input parameter sortType = 2",
                "type": "string",
                "pattern": "\\d+",
                "maxLength": 10,
                "example": "1"
              },
              "distance": {
                "description": "Sort ascending by this item when input parameter sortType = 3. Value corresponding to the unit of distanceUnit is set.",
                "type": "string",
                "pattern": "\\d+",
                "example": "3"
              },
              "distanceUnit": {
                "description": "1: Km | 2: Mile",
                "type": "string",
                "pattern": "\\d+",
                "enum": [
                  "1",
                  "2"
                ],
                "example": "1"
              },
              "latitude": {
                "description": "Degree",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "35.7897958"
              },
              "longitude": {
                "description": "Degree",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "139.607271"
              },
              "spotId": {
                "description": "ID of MySpot(Pins)",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              },
              "serviceType": {
                "description": "0: My Spot | 1: Pins (Others)",
                "type": "string",
                "enum": [
                  "0",
                  "1"
                ],
                "example": "0"
              },
              "phoneNumber": {
                "description": "Phone Number of MySpot(Pins)",
                "type": "string",
                "maxLength": 20,
                "example": "090********"
              },
              "spotComment": {
                "description": "Comment of MySpot(Pins)",
                "type": "string",
                "maxLength": 300,
                "example": "aaa"
              },
              "spotURL": {
                "description": "URL of MySpot(Pins)",
                "type": "string",
                "maxLength": 300,
                "example": "aaa"
              },
              "allRegisteredSpotCount": {
                "description": "The total count of visited point that has been registered for each “user + vehicle”.",
                "type": "string",
                "pattern": "\\d+",
                "example": "1"
              },
              "externalSite": {
                "description": "Identification string of external sites",
                "type": "string",
                "maxLength": 10,
                "pattern": "\\d+",
                "example": "1"
              },
              "relURL": {
                "description": "URL of external site.",
                "type": "string",
                "maxLength": 300,
                "example": "1"
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "categoryListCount": {
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "1"
                    },
                    "categoryList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "categoryId": {
                            "type": "string",
                            "pattern": "\\d+",
                            "maxLength": 16,
                            "example": "1234567890123456"
                          },
                          "categoryName": {
                            "type": "string",
                            "maxLength": 64,
                            "example": "aaa"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "insDate": {
                "description": "Registered Date. (YYYY-mm-dd hh:mm:ss)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                "example": "2018-01-02 03:04:05"
              }
            }
          }
        }
      }
    },
    "UpdateRecordVisitHistoryFlagResponse": {
      "description": "UpdateRecordVisitHistoryFlag response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "UpdateRecordVisitHistoryFlag"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetRecordVisitHistoryFlagResponse": {
      "description": "GetRecordVisitHistoryFlag response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "GetRecordVisitHistoryFlag"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "recordVisitHistoryFlag": {
                "description": "0: Off(Not record) | 1: On(Record)",
                "type": "string",
                "pattern": "\\d+",
                "enum": [
                  "0",
                  "1"
                ],
                "example": "1"
              }
            }
          }
        }
      }
    },
    "DeleteVisitedSpotResponse": {
      "description": "DeleteVisitedSpot response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "DeleteVisitedSpot"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "RegisterCategoryRequest": {
      "description": "RegisterCategory response",
      "type": "object",
      "required": [
        "globalId",
        "productOwnId",
        "operation",
        "serviceType",
        "categoryList"
      ],
      "properties": {
        "globalId": {
          "description": "GlobalId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000001"
        },
        "productOwnId": {
          "description": "ProductOwnId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000002"
        },
        "operation": {
          "description": "0: Create | 1: Update",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "serviceType": {
          "description": "0: My Spot (KJ) | 1: Pins (Others: KZ etc) ",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "categoryList": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "requestSeq"
            ],
            "properties": {
              "requestSeq": {
                "description": "For each category data of registration and updated, set a sequential number from 1 by requester.",
                "type": "string",
                "pattern": "\\d+",
                "example": "1"
              },
              "categoryId": {
                "description": "Set only to update spot info.Case (Register):Empty; Case (Update): Mandatory.",
                "type": "string",
                "maxLength": 16,
                "pattern": "\\d+",
                "example": "1"
              },
              "categoryName": {
                "description": "Case (Register):Mandatory; Case (Update): Optional(null).Allow multibyte character set",
                "type": "string",
                "maxLength": 64,
                "example": "abc"
              },
              "categoryComment": {
                "description": "Case (Register):Mandatory; Case (Update): Optional(null).Allow multibyte character set",
                "type": "string",
                "maxLength": 320,
                "example": "abc"
              }
            }
          }
        }
      }
    },
    "RegisterCategoryResponse": {
      "description": "RegisterCategory response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "RegisterCategory"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "categoryListCount": {
                "description": "Number of categories that are included in categoryList",
                "type": "string",
                "maxLength": 4,
                "pattern": "\\d+",
                "example": "1"
              },
              "categoryList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "requestSeq": {
                      "description": "requestSeq was set at the time of request",
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "1"
                    },
                    "categoryId": {
                      "description": "Category ID",
                      "type": "string",
                      "pattern": "\\d+",
                      "minLength": 16,
                      "maxLength": 16,
                      "example": "1234567890123456"
                    },
                    "registerResult": {
                      "description": "Processing result code of each spot.In the case of succcess, it is 100.",
                      "type": "string",
                      "pattern": "\\d+",
                      "example": "100"
                    },
                    "errorItemName": {
                      "description": "The name of the request parameter that caused the error. </br> It is returned only if a single parameter error.",
                      "type": "string",
                      "example": "aaa"
                    }
                  }
                }
              },
              "exceededCount": {
                "description": "The number of that exceeded the upper limit of registration</br> [MySpot] 20 / [Pins] 15</br> Return only in the case of HTTP Response Header “X-Status-Code” is 228.",
                "type": "string",
                "pattern": "\\d+",
                "example": "400"
              }
            }
          }
        }
      }
    },
    "DeleteCategoryResponse": {
      "description": "DeleteCategory response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "DeleteCategory"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "categoryId": {
                "description": "The deleted categoryId, returned in comma-separated.",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              }
            }
          }
        }
      }
    },
    "RegisterServerNotificationRequest": {
      "description": "RegisterServerNotification Request",
      "type": "object",
      "required": [
        "globalId",
        "productOwnId",
        "sendStartDate",
        "sendEndDate",
        "notifications"
      ],
      "properties": {
        "globalId": {
          "description": "GlobalId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000001"
        },
        "productOwnId": {
          "description": "ProductOwnId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000002"
        },
        "listId": {
          "description": "Server notification list ID.</br> (*) It is mandatory to update server notification list.",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 15,
          "maxLength": 15,
          "example": "123456789012345"
        },
        "requestType": {
          "description": "1: Server request. | 2: Link in subject.",
          "type": "string",
          "enum": [
            "1",
            "2"
          ],
          "example": "1"
        },
        "sendStartDate": {
          "description": "Send start date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "sendEndDate": {
          "description": "Send end date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "departureDate": {
          "description": "Departure plan date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "priority": {
          "description": "0: Normal. | 1: Argent.",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "systemId": {
          "description": "Request source ID.",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 3,
          "maxLength": 3,
          "example": "123"
        },
        "notifications": {
          "description": "Array of server notification commands.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "cmdType"
            ],
            "properties": {
              "cmdType": {
                "description": "ROUTE_INFO | DIAGNOSIS_DELETION_REQUEST | TEXT_TO_SPEECH",
                "type": "string",
                "minLength": 50,
                "maxLength": 50,
                "enum": [
                  "ROUTE_INFO",
                  "DIAGNOSIS_DELETION_REQUEST",
                  "TEXT_TO_SPEECH"
                ],
                "example": "TEXT_TO_SPEECH"
              },
              "parameterRouteInfo": {
                "$ref": "#/definitions/RegisterServerNotificationRouteInfo"
              },
              "parameterDiagnosisDeletionRequest": {
                "$ref": "#/definitions/RegisterServerNotificationDiagnosisDeletionRequest"
              },
              "parameterTextToSpeech": {
                "$ref": "#/definitions/RegisterServerNotificationTextToSpeech"
              }
            }
          }
        }
      }
    },
    "RegisterServerNotificationRouteInfo": {
      "description": "ROUTE_INFO.(*) It is mandatory when cmdType='ROUTE_INFO'.",
      "type": "object",
      "required": [
        "goalLat",
        "goalLon"
      ],
      "properties": {
        "title": {
          "description": "Notification title.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "message": {
          "description": "Notification message.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "calParam": {
          "description": "Root search parameters.",
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "example": "27"
        },
        "trfSource": {
          "description": "Root search source.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "example": "1"
        },
        "trfTime": {
          "description": "Trip time source.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "example": "1"
        },
        "settings": {
          "description": "Other parameters. (max 99)",
          "type": "object",
          "properties": {
            "key": {
              "description": "Parameter name.(*) It is mandatory when “settings” is set.",
              "type": "string",
              "minLength": 50,
              "maxLength": 50,
              "example": "aaa"
            },
            "value": {
              "description": "Parameter value.(*) It is mandatory when “settings” is set.",
              "type": "string",
              "minLength": 1000,
              "maxLength": 1000,
              "example": "aaa"
            }
          }
        },
        "startName": {
          "description": "Start point name.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "startLat": {
          "description": "Start point latitude. (ITRF- Degree: -90～90)",
          "type": "string",
          "minLength": 9,
          "maxLength": 9,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "35.7897958"
        },
        "startLon": {
          "description": "Start point longitude. (ITRF- Degree: -180～180)",
          "type": "string",
          "minLength": 10,
          "maxLength": 10,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "139.607271"
        },
        "startAddressinfo": {
          "description": "Start point address.",
          "type": "string",
          "minLength": 480,
          "maxLength": 480,
          "example": "aaa"
        },
        "startDir": {
          "description": "Start direction (0～360 (0：north, Clockwise)",
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "pattern": "\\d+",
          "example": "250"
        },
        "startAtt": {
          "description": "Start point road atribute.</br> - “hwyon”:high way.</br> - “hwyoff”:general road.(default)",
          "type": "string",
          "minLength": 20,
          "maxLength": 20,
          "enum": [
            "hwyon",
            "hwyoff"
          ],
          "default": "hwyoff",
          "example": "hwyoff"
        },
        "goalName": {
          "description": "Goal point name.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "goalLat": {
          "description": "Goal point latitude. (ITRF- Degree: -90～90)",
          "type": "string",
          "minLength": 9,
          "maxLength": 9,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "35.7897958"
        },
        "goalLon": {
          "description": "Goal point longitude. (ITRF- Degree: -180～180)",
          "type": "string",
          "minLength": 10,
          "maxLength": 10,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "139.607271"
        },
        "goalAddressinfo": {
          "description": "Goal point address.",
          "type": "string",
          "minLength": 480,
          "maxLength": 480,
          "example": "aaa"
        },
        "goalAtt": {
          "description": "Goal point road atribute.</br> - “hwyon”:high way.</br> - “hwyoff”:general road.(default)",
          "type": "string",
          "minLength": 20,
          "maxLength": 20,
          "enum": [
            "hwyon",
            "hwyoff"
          ],
          "default": "hwyoff",
          "example": "hwyoff"
        },
        "pass": {
          "description": "Stopover. (max  99)",
          "type": "object",
          "properties": {
            "passName": {
              "description": "Stopover name.",
              "type": "string",
              "minLength": 120,
              "maxLength": 120,
              "example": "aaa"
            },
            "passLat": {
              "description": "Stopover latitude. (ITRF- Degree: -90～90)</br> (*) It is mandatory when “pass” is set.",
              "type": "string",
              "minLength": 9,
              "maxLength": 9,
              "pattern": "\\d+(\\.\\d+)?",
              "example": "35.7897958"
            },
            "passLon": {
              "description": "Stopover longitude. (ITRF- Degree: -180～180)</br> (*) It is mandatory when “pass” is set.",
              "type": "string",
              "minLength": 10,
              "maxLength": 10,
              "pattern": "\\d+(\\.\\d+)?",
              "example": "139.607271"
            },
            "passAddressinfo": {
              "description": "Stopover address.",
              "type": "string",
              "minLength": 480,
              "maxLength": 480,
              "example": "aaa"
            },
            "passAtt": {
              "description": "Stopover road atribute.</br> - “hwyon”:high way (pass). - “hwyoff”:general road(pass). (default) - “MEM”:none(stopover) - “MEM:hwyon”:high way(stopover) - “MEM:hwyoff”:general road(stopover)",
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "enum": [
                "hwyon",
                "hwyoff",
                "MEM",
                "MEM:hwyon",
                "MEM:hwyoff"
              ],
              "default": "hwyoff",
              "example": "hwyoff"
            }
          }
        },
        "routeName": {
          "description": "Root name",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        }
      }
    },
    "RegisterServerNotificationDiagnosisDeletionRequest": {
      "description": "DIAGNOSIS_DELETION_REQUEST.(*) It is mandatory when cmdType='DIAGNOSIS_DELETION_REQUEST'.",
      "type": "object",
      "properties": {
        "bCanDtc": {
          "description": "1: Send DTC clear command to B-CAN ECU.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "fCanDtc": {
          "description": "1: Delete F-CAN DTC log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "fCanFreeze": {
          "description": "1: Delete F-CAN Freeze data log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "warningLamp": {
          "description": "1: Delete Warnig Lamp info log, Warnig Lamp info message.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "maintenanceMinder": {
          "description": "1: Delete vehicle info log, Maintenance Minder message.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "obs": {
          "description": "1: Delete OBS log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "subRecorder": {
          "description": "1: Delete last upload date of Sub Recorder.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        }
      }
    },
    "RegisterServerNotificationTextToSpeech": {
      "description": "TEXT_TO_SPEECH.(*) It is mandatory when cmdType='TEXT_TO_SPEECH'.",
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "description": "Text",
          "type": "string",
          "minLength": 4000,
          "maxLength": 4000,
          "example": "aaa"
        }
      }
    },
    "RegisterServerNotificationResponse": {
      "description": "RegisterServerNotification response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "RegisterServerNotification"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "listId": {
                "description": "List Id",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 15,
                "maxLength": 15,
                "example": "123456789012345"
              }
            }
          }
        }
      }
    },
    "GetServerNotificationRequest": {
      "description": "GetServerNotification Request",
      "type": "object",
      "required": [
        "globalId",
        "productOwnId",
        "cmdType",
        "sortCondition"
      ],
      "properties": {
        "globalId": {
          "description": "GlobalId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000001"
        },
        "productOwnId": {
          "description": "ProductOwnId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000002"
        },
        "sendStartDate": {
          "description": "Send start date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "sendEndDate": {
          "description": "Send end date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "priority": {
          "description": "0: Normal. | 1: Argent.",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "status": {
          "description": "- 01: Not delivered.</br> - 02: Delivered.</br> (Not used below.)</br> - 03: Received execution result.</br>  - 09: Expired.",
          "type": "string",
          "enum": [
            "01",
            "02",
            "03",
            "09"
          ],
          "example": "01"
        },
        "departureMin": {
          "description": "Minimam departure plan date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "departureMax": {
          "description": "Maximam departure plan date.(YYYYMMDDHH24MISS)",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
          "example": "20150730052616"
        },
        "cmdType": {
          "description": "ROUTE_INFO | DIAGNOSIS_DELETION_REQUEST | TEXT_TO_SPEECH",
          "type": "string",
          "minLength": 50,
          "maxLength": 50,
          "enum": [
            "ROUTE_INFO",
            "DIAGNOSIS_DELETION_REQUEST",
            "TEXT_TO_SPEECH"
          ],
          "example": "TEXT_TO_SPEECH"
        },
        "sortCondition": {
          "description": "Sort condition.</br> - 1: listId asc.</br> - 2: listId desc.</br> - 3: sendStartDate asc.</br> - 4: departureDate asc.",
          "type": "string",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ],
          "example": "1"
        }
      }
    },
    "GetServerNotificationResponse": {
      "description": "GetServerNotification response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "GetServerNotification"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "globalId": {
                "description": "GlobalId",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1110000000000001"
              },
              "productOwnId": {
                "description": "ProductOwnId",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1110000000000002"
              },
              "listId": {
                "description": "List Id",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 15,
                "maxLength": 15,
                "example": "123456789012345"
              },
              "status": {
                "description": "- 01: Not delivered.</br> - 02: Delivered.</br> (Not used below.)</br> - 03: Received execution result.</br>  - 09: Expired.",
                "type": "string",
                "enum": [
                  "01",
                  "02",
                  "03",
                  "09"
                ],
                "example": "01"
              },
              "ackDate": {
                "description": "Acknowledge date of server notification list..(YYYYMMDDHH24MISS)",
                "type": "string",
                "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                "example": "20150730052616"
              },
              "requestType": {
                "description": "1: Server request. | 2: Link in subject.",
                "type": "string",
                "enum": [
                  "1",
                  "2"
                ],
                "example": "1"
              },
              "sendStartDate": {
                "description": "Send start date.(YYYYMMDDHH24MISS)",
                "type": "string",
                "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                "example": "20150730052616"
              },
              "sendEndDate": {
                "description": "Send end date.(YYYYMMDDHH24MISS)",
                "type": "string",
                "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                "example": "20150730052616"
              },
              "departureDate": {
                "description": "Departure plan date.(YYYYMMDDHH24MISS)",
                "type": "string",
                "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                "example": "20150730052616"
              },
              "priority": {
                "description": "0: Normal. | 1: Argent.",
                "type": "string",
                "enum": [
                  "0",
                  "1"
                ],
                "example": "0"
              },
              "validity": {
                "description": "0: Valid. | 1: Invalid. (deleted).",
                "type": "string",
                "enum": [
                  "0",
                  "1"
                ],
                "example": "0"
              },
              "systemId": {
                "description": "Request source ID.",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 3,
                "maxLength": 3,
                "example": "123"
              },
              "notifications": {
                "description": "Array of server notification commands.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "cmdId": {
                      "description": "Command ID for server notification list.",
                      "type": "string",
                      "pattern": "\\d+",
                      "minLength": 16,
                      "maxLength": 16,
                      "example": "1234567890123456"
                    },
                    "cmdType": {
                      "description": "ROUTE_INFO | DIAGNOSIS_DELETION_REQUEST | TEXT_TO_SPEECH",
                      "type": "string",
                      "minLength": 50,
                      "maxLength": 50,
                      "enum": [
                        "ROUTE_INFO",
                        "DIAGNOSIS_DELETION_REQUEST",
                        "TEXT_TO_SPEECH"
                      ],
                      "example": "TEXT_TO_SPEECH"
                    },
                    "result": {
                      "description": "Execution result.",
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 5,
                      "example": "aaa"
                    },
                    "getDate": {
                      "description": "Command get date.(YYYYMMDDHH24MISS)",
                      "type": "string",
                      "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                      "example": "20150730052616"
                    },
                    "execDate": {
                      "description": "Execution date.(YYYYMMDDHH24MISS)",
                      "type": "string",
                      "pattern": "^\\d{4}\\d{2}\\d{2}\\d{2}\\d{2}\\d{2}$",
                      "example": "20150730052616"
                    },
                    "parameterRouteInfo": {
                      "$ref": "#/definitions/GetServerNotificationRouteInfo"
                    },
                    "parameterDiagnosisDeletionRequest": {
                      "$ref": "#/definitions/GetServerNotificationDiagnosisDeletionRequest"
                    },
                    "parameterTextToSpeech": {
                      "$ref": "#/definitions/GetServerNotificationTextToSpeech"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GetServerNotificationRouteInfo": {
      "description": "ROUTE_INFO",
      "type": "object",
      "properties": {
        "title": {
          "description": "Notification title.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "message": {
          "description": "Notification message.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "calParam": {
          "description": "Root search parameters.",
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "example": "27"
        },
        "trfSource": {
          "description": "Root search source.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "example": "1"
        },
        "trfTime": {
          "description": "Trip time source.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "example": "1"
        },
        "settings": {
          "description": "Other parameters. (max 99)",
          "type": "object",
          "properties": {
            "no": {
              "description": "Sequence no. (1~99)",
              "type": "string",
              "pattern": "\\d+",
              "minimum": 1,
              "maximum": 99,
              "example": "99"
            },
            "key": {
              "description": "Parameter name.",
              "type": "string",
              "minLength": 50,
              "maxLength": 50,
              "example": "aaa"
            },
            "value": {
              "description": "Parameter value.",
              "type": "string",
              "minLength": 1000,
              "maxLength": 1000,
              "example": "aaa"
            }
          }
        },
        "startName": {
          "description": "Start point name.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "startLat": {
          "description": "Start point latitude. (ITRF- Degree: -90～90)",
          "type": "string",
          "minLength": 9,
          "maxLength": 9,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "35.7897958"
        },
        "startLon": {
          "description": "Start point longitude. (ITRF- Degree: -180～180)",
          "type": "string",
          "minLength": 10,
          "maxLength": 10,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "139.607271"
        },
        "startAddressinfo": {
          "description": "Start point address.",
          "type": "string",
          "minLength": 480,
          "maxLength": 480,
          "example": "aaa"
        },
        "startDir": {
          "description": "Start direction (0～360 (0：north, Clockwise)",
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "pattern": "\\d+",
          "example": "250"
        },
        "startAtt": {
          "description": "Start point road atribute.</br> - “hwyon”:high way.</br> - “hwyoff”:general road.",
          "type": "string",
          "minLength": 20,
          "maxLength": 20,
          "enum": [
            "hwyon",
            "hwyoff"
          ],
          "example": "hwyoff"
        },
        "goalName": {
          "description": "Goal point name.",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        },
        "goalLat": {
          "description": "Goal point latitude. (ITRF- Degree: -90～90)",
          "type": "string",
          "minLength": 9,
          "maxLength": 9,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "35.7897958"
        },
        "goalLon": {
          "description": "Goal point longitude. (ITRF- Degree: -180～180)",
          "type": "string",
          "minLength": 10,
          "maxLength": 10,
          "pattern": "\\d+(\\.\\d+)?",
          "example": "139.607271"
        },
        "goalAddressinfo": {
          "description": "Goal point address.",
          "type": "string",
          "minLength": 480,
          "maxLength": 480,
          "example": "aaa"
        },
        "goalAtt": {
          "description": "Goal point road atribute.</br> - “hwyon”:high way.</br> - “hwyoff”:general road.",
          "type": "string",
          "minLength": 20,
          "maxLength": 20,
          "enum": [
            "hwyon",
            "hwyoff"
          ],
          "example": "hwyoff"
        },
        "pass": {
          "description": "Stopover. (max  99)",
          "type": "object",
          "properties": {
            "no": {
              "description": "Sequence no. (1~99)",
              "type": "string",
              "pattern": "\\d+",
              "minimum": 1,
              "maximum": 99,
              "example": "99"
            },
            "passName": {
              "description": "Stopover name.",
              "type": "string",
              "minLength": 120,
              "maxLength": 120,
              "example": "aaa"
            },
            "passLat": {
              "description": "Stopover latitude. (ITRF- Degree: -90～90)",
              "type": "string",
              "minLength": 9,
              "maxLength": 9,
              "pattern": "\\d+(\\.\\d+)?",
              "example": "35.7897958"
            },
            "passLon": {
              "description": "Stopover longitude. (ITRF- Degree: -180～180)",
              "type": "string",
              "minLength": 10,
              "maxLength": 10,
              "pattern": "\\d+(\\.\\d+)?",
              "example": "139.607271"
            },
            "passAddressinfo": {
              "description": "Stopover address.",
              "type": "string",
              "minLength": 480,
              "maxLength": 480,
              "example": "aaa"
            },
            "passAtt": {
              "description": "Stopover road atribute.</br> - “hwyon”:high way (pass). - “hwyoff”:general road(pass).  - “MEM”:none(stopover) - “MEM:hwyon”:high way(stopover) - “MEM:hwyoff”:general road(stopover)",
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "enum": [
                "hwyon",
                "hwyoff",
                "MEM",
                "MEM:hwyon",
                "MEM:hwyoff"
              ],
              "example": "hwyoff"
            }
          }
        },
        "routeName": {
          "description": "Root name",
          "type": "string",
          "minLength": 120,
          "maxLength": 120,
          "example": "aaa"
        }
      }
    },
    "GetServerNotificationDiagnosisDeletionRequest": {
      "description": "DIAGNOSIS_DELETION_REQUEST.",
      "type": "object",
      "properties": {
        "bCanDtc": {
          "description": "1: Send DTC clear command to B-CAN ECU.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "fCanDtc": {
          "description": "1: Delete F-CAN DTC log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "fCanFreeze": {
          "description": "1: Delete F-CAN Freeze data log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "warningLamp": {
          "description": "1: Delete Warnig Lamp info log, Warnig Lamp info message.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "maintenanceMinder": {
          "description": "1: Delete vehicle info log, Maintenance Minder message.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "obs": {
          "description": "1: Delete OBS log.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        },
        "subRecorder": {
          "description": "1: Delete last upload date of Sub Recorder.</br> * If input is null, set 0 (false)",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "1"
        }
      }
    },
    "GetServerNotificationTextToSpeech": {
      "description": "TEXT_TO_SPEECH.(*) It is mandatory when cmdType='TEXT_TO_SPEECH'.",
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "expirationDate": {
          "description": "Set RegisterServerNotification input parameter \"sendEndDate\" value.(yyyy-MM-dd'T'HH:mm:ssZZZZZ)",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}ZZZZZ$",
          "example": "2018-03-01T09:00:00ZZZZZ",
          "type": "string"
        },
        "text": {
          "description": "Text",
          "type": "string",
          "minLength": 4000,
          "maxLength": 4000,
          "example": "aaa"
        }
      }
    },
    "DeleteServerNotificationRequest": {
      "description": "DeleteServerNotification Request",
      "type": "object",
      "required": [
        "globalId",
        "productOwnId",
        "listIds"
      ],
      "properties": {
        "globalId": {
          "description": "GlobalId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000001"
        },
        "productOwnId": {
          "description": "ProductOwnId",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1110000000000002"
        },
        "listIds": {
          "description": "listIds",
          "type": "object",
          "required": [
            "listId"
          ],
          "properties": {
            "listId": {
              "description": "Server notification list ID.",
              "type": "string",
              "pattern": "\\d+",
              "minLength": 15,
              "maxLength": 15,
              "example": "123456789012345"
            }
          }
        }
      }
    },
    "DeleteServerNotificationResponse": {
      "description": "DeleteServerNotification response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "DeleteServerNotification"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "RegisterContentRequest": {
      "description": "RegisterContent Request",
      "type": "object",
      "required": [
        "maintenanceUserId",
        "countryCode",
        "extractFlag",
        "wallCategoryId",
        "wallServiceId",
        "sortListFlag",
        "sendBaseDateType",
        "deliveryCycle",
        "urgentFlag",
        "locationInfoType",
        "messages"
      ],
      "properties": {
        "maintenanceUserId": {
          "description": "specified by GTC",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "countryCode": {
          "description": "ISO 3166-1[alpha-3]",
          "type": "string",
          "maxLength": 3,
          "minLength": 3,
          "example": "JPN"
        },
        "extractFlag": {
          "description": "0: Provided destination from other system | 1: Extracting destination in GTC",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "wallCategoryId": {
          "description": "for INJ: - 1: Notice from Honda(Hondaからのお知らせ)</br> - 2: Notice from Internavi Information Center(インターナビ情報センターからのお知らせ)</br> - 3: Notice from Dealer(販売店からのお知らせ)</br> - 4: Message from your car(愛車からのメッセージ)</br> - 5: Instant conditions of driving（ドライブ実況）</br> - 6: Warning light support notification（警告灯サポート通知） - 7: ROAD H!NTS",
          "type": "string",
          "maxLength": 2,
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ]
        },
        "wallServiceId": {
          "description": "for INJ:TBD",
          "type": "string",
          "maxLength": 2
        },
        "sortListFlag": {
          "description": "- 9: None specify</br> - 1: VIN list</br> - 6: Message API VIN Header list</br> - 7: Message API VIN(From-To) list",
          "type": "string",
          "enum": [
            "1",
            "6",
            "7",
            "9"
          ],
          "example": "9"
        },
        "sendBaseDateType": {
          "description": "- 9: None specify</br> - 1: Member Registration Date",
          "type": "string",
          "enum": [
            "1",
            "9"
          ],
          "example": "9"
        },
        "elapsedDays": {
          "description": "Elapsed days from the sendBaseDate",
          "type": "string",
          "pattern": "\\d+",
          "maxLength": 5,
          "example": "aaa"
        },
        "deliveryCycle": {
          "description": "Message delivery cycle</br> - 0:One time</br> - 1:Repeat</br> - 2:Reserve",
          "type": "string",
          "enum": [
            "0",
            "1",
            "2"
          ],
          "example": "0"
        },
        "deliveryStartDate": {
          "description": "Message delivery start date (in GMT) (yyyyMMdd).(*) It is mandatory when deliveryCycle='1'or '2'.",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}$",
          "example": "20180725"
        },
        "deliveryTime": {
          "description": "Message delivery time (in GMT) (HHmm).(*) It is mandatory when deliveryCycle='1'or '2'.",
          "type": "string",
          "pattern": "^\\d{2}\\d{2}$",
          "example": "1832"
        },
        "expirationDate": {
          "description": "Message delivery end date (in GMT) (yyyyMMdd).(*) It is mandatory when deliveryCycle='1'.",
          "type": "string",
          "pattern": "^\\d{4}\\d{2}\\d{2}$",
          "example": "20180725"
        },
        "expirationTime": {
          "description": "Message delivery end time (in GMT) (HHmm).(*) It is mandatory when deliveryCycle='1'.",
          "type": "string",
          "pattern": "^\\d{2}\\d{2}$",
          "example": "1832"
        },
        "urgentFlag": {
          "description": "0: Normal | 1: Urgent",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "deliveryAppType": {
          "description": "1: Navi | 2: Application</br> Default value is null which means all.",
          "type": "string",
          "enum": [
            "0",
            "1"
          ],
          "example": "0"
        },
        "contentIdLocal": {
          "description": "ID that INJ has Issued.",
          "type": "string",
          "maxLength": 32,
          "example": "12345678901234567890123456789012"
        },
        "locationInfoType": {
          "description": "- 0: Not set</br>  - 1: Set the user's dealer</br>  - 2: Set the parameter values</br>  - 3: Set both the user's dealer and the parameter values",
          "type": "string",
          "enum": [
            "0",
            "1",
            "2",
            "3"
          ],
          "example": "0"
        },
        "priority": {
          "description": "- 0-3: Display an exclamation mark</br>   - 4-9: Not display an exclamation mark",
          "type": "string",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9"
          ],
          "example": "0"
        },
        "messages": {
          "description": "Messages",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "languageCode",
              "contentTitle",
              "contentText"
            ],
            "properties": {
              "languageCode": {
                "description": "RFC3066",
                "type": "string",
                "maxLength": 7,
                "example": "en"
              },
              "contentTitle": {
                "description": "Content Title",
                "type": "string",
                "maxLength": 200,
                "example": "aaa"
              },
              "contentText": {
                "description": "This value can have placeholders in the form {columnN}.</br> {columnN}: {column1}, {column2}, ..., {column10}.</br> These can replace by the values which pass in UrgetSend API parameters.",
                "type": "string",
                "maxLength": 4000,
                "example": "aaa"
              },
              "notifyImageFileId1": {
                "description": "Notify Image FileId 1",
                "type": "string",
                "maxLength": 16,
                "minLength": 16,
                "pattern": "\\d+",
                "example": "1110000000011165"
              },
              "notifyImageFileId2": {
                "description": "Notify Image FileId 2",
                "type": "string",
                "maxLength": 16,
                "minLength": 16,
                "pattern": "\\d+",
                "example": "1110000000011165"
              },
              "notifyImageCaption1": {
                "description": "Must be specified if attachment exist",
                "type": "string",
                "maxLength": 150,
                "example": "Image caption 1"
              },
              "notifyImageCaption2": {
                "description": "Must be specified if attachment exist",
                "type": "string",
                "maxLength": 150,
                "example": "Image caption 2"
              },
              "titleTTS": {
                "description": "Title of TTS",
                "type": "string",
                "maxLength": 3000,
                "example": "aaa"
              },
              "textTTS": {
                "description": "Text of TTS",
                "type": "string",
                "maxLength": 6000,
                "example": "aaa"
              },
              "locationName": {
                "description": "Location Name",
                "type": "string",
                "maxLength": 120,
                "example": "aaa"
              },
              "zipCode": {
                "description": "Zip Code",
                "type": "string",
                "maxLength": 20,
                "example": "aaa"
              },
              "address": {
                "description": "Adress",
                "type": "string",
                "maxLength": 480,
                "example": "aaa"
              },
              "phoneNumber": {
                "description": "Phone Number",
                "type": "string",
                "maxLength": 20,
                "example": "12345678"
              },
              "locationX": {
                "description": "Within integer 3, decimal 7 digits.",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "139.607271"
              },
              "locationY": {
                "description": "Within integer 3, decimal 7 digits.",
                "type": "string",
                "pattern": "\\d+(\\.\\d+)?",
                "example": "139.607271"
              },
              "locationInfoText": {
                "description": "LocationInfo Text",
                "type": "string",
                "maxLength": 6000,
                "example": "aaa"
              },
              "notifyLocationImageFileId1": {
                "description": "Notify Location Image FileId 1",
                "type": "string",
                "maxLength": 16,
                "minLength": 16,
                "pattern": "\\d+",
                "example": "1110000000011166"
              },
              "notifyLocationImageFileId2": {
                "description": "Notify Location Image FileId 2",
                "type": "string",
                "maxLength": 16,
                "minLength": 16,
                "pattern": "\\d+",
                "example": "1110000000011166"
              },
              "displayLinkCaption": {
                "description": "Display Link Caption",
                "type": "string",
                "maxLength": 400,
                "example": "aaa"
              },
              "urlList": {
                "description": "Max 10. Update by replace all.",
                "type": "array",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "description": "URL",
                      "type": "string",
                      "maxLength": 450,
                      "example": "aaa"
                    },
                    "urlCaption": {
                      "description": "URL",
                      "type": "string",
                      "maxLength": 150,
                      "example": "aaa"
                    }
                  }
                }
              },
              "phoneNumberList": {
                "description": "Max 10. Update by replace all.",
                "type": "array",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "required": [
                    "phoneNumber"
                  ],
                  "properties": {
                    "phoneNumber": {
                      "description": "Phone Number",
                      "type": "string",
                      "maxLength": 20,
                      "example": "aaa"
                    },
                    "phoneName": {
                      "description": "Phone Number",
                      "type": "string",
                      "maxLength": 150,
                      "example": "aaa"
                    }
                  }
                }
              },
              "messageExpirationDate": {
                "description": "Message delivery end date (in GMT) (yyyyMMdd)",
                "type": "string",
                "pattern": "^\\d{4}\\d{2}\\d{2}$",
                "example": "20180725"
              },
              "messageExpirationTime": {
                "description": "Message delivery end time (in GMT) (HHmm)",
                "type": "string",
                "pattern": "^\\d{2}\\d{2}$",
                "example": "1832"
              }
            }
          }
        }
      }
    },
    "RegisterContentResponse": {
      "description": "RegisterContent response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "RegisterContent"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "contentId": {
                "description": "Content Id",
                "type": "number",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              }
            }
          }
        }
      }
    },
    "RegisterContentImageResponse": {
      "description": "RegisterContentImage response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "RegisterContentImage"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "1"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "imageFileId": {
                "description": "When registered.",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              }
            }
          }
        }
      }
    },
    "UrgentSendRequest": {
      "description": "UrgentSend Request",
      "type": "object",
      "required": [
        "maintenanceUserId",
        "contentId"
      ],
      "properties": {
        "maintenanceUserId": {
          "description": "specified by GTC",
          "type": "string",
          "maxLength": 20,
          "example": "aaa"
        },
        "contentId": {
          "description": "Content Id",
          "type": "string",
          "pattern": "\\d+",
          "minLength": 16,
          "maxLength": 16,
          "example": "1234567890123456"
        },
        "memberVehicle": {
          "description": "Either memberVehicle or vin is Mandatory.",
          "type": "object",
          "required": [
            "globalId",
            "productOwnId"
          ],
          "properties": {
            "globalId": {
              "description": "GlobalId",
              "type": "string",
              "pattern": "\\d+",
              "minLength": 16,
              "maxLength": 16,
              "example": "1110000000000001"
            },
            "productOwnId": {
              "description": "ProductOwnId",
              "type": "string",
              "pattern": "\\d+",
              "minLength": 16,
              "maxLength": 16,
              "example": "1110000000000002"
            }
          }
        },
        "vin": {
          "description": "Either memberVehicle or vin is Mandatory.Cannot specified VIN header.",
          "type": "string",
          "maxLength": 17,
          "example": "123"
        },
        "column1": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column2": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column3": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column4": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column5": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column6": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column7": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column8": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column9": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        },
        "column10": {
          "description": "Replacing content body text when send message.</br> Not Exists parameter.-> Do not processing.</br> A parameter is null. -> Do not processing.</br> A Parameter is blank.-> Do processing.",
          "type": "string",
          "maxLength": 100,
          "minLength": 100,
          "example": "abc"
        }
      }
    },
    "UrgentSendResponse": {
      "description": "UrgentSend response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "UrgentSend"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "UploadMessageTargetResponse": {
      "description": "UploadMessageTarget response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "UploadMessageTarget"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "uploadFileId": {
                "description": "Upload File Id",
                "type": "number",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1234567890123456"
              }
            }
          }
        }
      }
    },
    "ValidateAuthByHICKeyResponse": {
      "description": "ValidateAuthByHICKey response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "ValidateAuthByHICKey"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "OK"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "globalId": {
                "description": "GlobalId",
                "type": "string",
                "pattern": "\\d+",
                "minLength": 16,
                "maxLength": 16,
                "example": "1110000000000001"
              }
            }
          }
        }
      }
    },
    "DAQDataUploadAsyncRequest": {
      "description": "Request DAQ Data Upload",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "- on : DAQ Data Upload On</br> - off : DAQ Data Upload Off",
          "type": "string",
          "example": "on",
          "enum": [
            "on",
            "off"
          ]
        }
      }
    },
    "DAQDataUploadResultHistoryResponse": {
      "description": "Remote Engine Result History - Request Body ",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestCommand",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestCommand": {
                "description": "- on : DAQ Data Upload On</br> - off : DAQ Data Upload Off",
                "type": "string",
                "example": "on",
                "enum": [
                  "on",
                  "off"
                ]
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "WipeTCUResultHistoryResponse": {
      "description": "Wipe TCU Result History - Response Body",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "results",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "required": [
              "requestId",
              "requestStartTime",
              "requestStatus"
            ],
            "properties": {
              "requestId": {
                "description": "The same Request-ID that GTC has assigned to the original remote command request.",
                "type": "number",
                "maxLength": 18,
                "minLength": 18,
                "example": 123456789012345680
              },
              "requestStartTime": {
                "description": "Start Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestEndTime": {
                "description": "End Time. (YYYY-MM-DDTHH:MM:SS+00:00)",
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
                "example": "2018-03-01T09:00:00+00:00"
              },
              "requestStatus": {
                "description": "Request Status",
                "type": "string",
                "enum": [
                  "success",
                  "failure",
                  "in-progress"
                ],
                "example": "success"
              },
              "statusReason": {
                "description": "When requestStatus=failure</br> - W001: Order condition is not established</br> - W002: Can not execute because PPP restriction mode</br> - W003: Executed the order, but it did not succeed</br> - W101: Timeout</br> - E101: Invalid Parameter</br> - E201: TCU Processing Error</br> - E900: Another Error",
                "type": "string",
                "maxLength": 128,
                "enum": [
                  "W001",
                  "W002",
                  "W003",
                  "W101",
                  "E101",
                  "E201",
                  "E900"
                ],
                "example": "W101"
              }
            }
          }
        },
        "next": {
          "description": "Next page exists, true.",
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        }
      }
    },
    "CommonProductOwnId": {
      "description": "Common ProductOwnId - Response Body",
      "type": "object",
      "required": [
        "productOwnId"
      ],
      "properties": {
        "productOwnId": {
          "description": "productOwnID (a.k.a. productOwnershipID)",
          "type": "number",
          "maxLength": 16,
          "minLength": 16,
          "example": 123
        }
      }
    },
    "CommonGpsData": {
      "description": "GPS information.",
      "type": "object",
      "required": [
        "coordinate",
        "dtTime",
        "velocity",
        "courseHeading",
        "accuracy"
      ],
      "properties": {
        "coordinate": {
          "description": "Vehicle position information.",
          "type": "object",
          "required": [
            "latitude",
            "longitude",
            "datum",
            "format"
          ],
          "properties": {
            "latitude": {
              "description": "Latitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> latitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether North or South is determined by mark (+/-).<br/> + : North latitude<br/> - : South latitude<br/> <br/> Default value: 0",
              "type": "number",
              "format": "int64",
              "default": 0,
              "example": 100,
              "minimum": -324000000,
              "maximum": 324000000
            },
            "longitude": {
              "description": "Longitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> longitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether East or West is determined by mark (+/-).<br/> + : East longitude<br/> - : West longitude<br/> <br/> Default value: 0",
              "type": "number",
              "format": "int64",
              "example": 100,
              "default": 0,
              "minimum": -648000000,
              "maximum": 648000000
            },
            "datum": {
              "description": "- wgs84 : World Geodetic System (fixed)",
              "type": "string",
              "enum": [
                "wgs84"
              ],
              "example": "wgs84"
            },
            "format": {
              "description": "- mas : milliarcseconds (fixed)",
              "type": "string",
              "enum": [
                "mas"
              ],
              "example": "mas"
            }
          }
        },
        "dtTime": {
          "description": "Acquisition time of vehicle position information from GPS.(UTC Time, RFC3339) (YYYY-MM-DDTHH:MM:SS+00:00)<br/> Default value: 1900-01-01T00:00:00+00:00",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "default": "1900-01-01T00:00:00+00:00",
          "example": "2017-06-30T12:50:00+00:00"
        },
        "velocity": {
          "description": "Vehicle speed information.",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "Vehicle speed information from GPS. (kph : kilometers per hour)<br/> <br/> Speed(nnnn.n kph)<br/> =>nnnn (Rounds down the decimal places)<br/> <br/> Default value: 0",
              "type": "number",
              "minimum": 0,
              "maximum": 1800,
              "default": 0,
              "example": 30
            },
            "unit": {
              "description": "- kph : kilometers per hour (fixed)",
              "type": "string",
              "enum": [
                "kph"
              ],
              "example": "kph"
            }
          }
        },
        "courseHeading": {
          "description": "Vehicle direction of movement information from GPS. [0.0-359.9]<br/> <br/> 0.0 : North<br/> 90.0 : East<br/> 180.0 : South<br/> 270.0 : West<br/> <br/> Default value: 0.0",
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 359.9,
          "default": 0,
          "example": 128.4
        },
        "accuracy": {
          "description": "Accuracy of GPS.",
          "type": "object",
          "required": [
            "pdop",
            "hdop"
          ],
          "properties": {
            "pdop": {
              "description": "Index number of position dilution of precision. (PDOP)<br/> The higher the number, the lower the accuracy.<br/> <br/> Default value: 0",
              "type": "number",
              "format": "int32",
              "minimum": 0,
              "maximum": 15,
              "default": 0,
              "example": 10
            },
            "hdop": {
              "description": "Index number of horizontal dilution of precision. (HDOP)<br/> The higher the number, the lower the accuracy.<br/> <br/> Default value: 0",
              "type": "number",
              "format": "int32",
              "minimum": 0,
              "maximum": 15,
              "default": 0,
              "example": 10
            }
          }
        }
      }
    },
    "CommonIgnitionRequired": {
      "description": "Ignition Common (Required)",
      "type": "object",
      "required": [
        "ignition"
      ],
      "properties": {
        "ignition": {
          "description": "IG state of direct wire that TCU detects when its order is received.<br/> - ignitionOff : IG OFF and ACC OFF<br/> - ignitionOn : (IG ON and ACC ON) OR (IG OFF and ACC ON)<br/> - engineOn : IG ON and ACC OFF<br/> - unknown : Undetectable",
          "type": "string",
          "enum": [
            "ignitionOff",
            "ignitionOn",
            "engineOn",
            "unknown"
          ],
          "example": "ignitionOff"
        }
      }
    },
    "CommonIgnition": {
      "description": "Ignition Common",
      "type": "object",
      "properties": {
        "ignition": {
          "description": "IG state of direct wire that TCU detects when its order is received.<br/> - ignitionOff : IG OFF and ACC OFF<br/> - ignitionOn : (IG ON and ACC ON) OR (IG OFF and ACC ON)<br/> - engineOn : IG ON and ACC OFF<br/> - unknown : Undetectable",
          "type": "string",
          "enum": [
            "ignitionOff",
            "ignitionOn",
            "engineOn",
            "unknown"
          ],
          "example": "ignitionOff"
        }
      }
    },
    "CommonGeoFenceSetup": {
      "description": "Mandatory when activationSetup is \"active\".",
      "type": "object",
      "required": [
        "type",
        "radius",
        "gpsDetails"
      ],
      "properties": {
        "type": {
          "description": "Type of Geo Fence.",
          "type": "object",
          "required": [
            "type",
            "mode"
          ],
          "properties": {
            "type": {
              "description": "- circle : Circle type.(fixed)",
              "type": "string",
              "example": "circle",
              "enum": [
                "circle"
              ]
            },
            "mode": {
              "description": "- inclusion : Alert when vehicle gets out of this Geo Fence.<br/> - exclusion : Alert when vehicle gets inside this Geo Fence.",
              "type": "string",
              "example": "exclusion",
              "enum": [
                "inclusion",
                "exclusion"
              ]
            }
          }
        },
        "radius": {
          "description": "Radius of violation area.",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "Long of radius.(km) [0.4 – 160.9]",
              "type": "number",
              "minimum": 0.4,
              "maximum": 160.9,
              "example": 160.9
            },
            "unit": {
              "description": "- km : kilometers.(fixed)",
              "type": "string",
              "enum": [
                "km"
              ],
              "example": "km"
            }
          }
        },
        "gpsDetails": {
          "description": "GPS detail information of Geo Fence.",
          "type": "object",
          "required": [
            "coordinate"
          ],
          "properties": {
            "coordinate": {
              "description": "Coordinate of GEO fence",
              "type": "object",
              "required": [
                "latitude",
                "longitude",
                "datum",
                "format"
              ],
              "properties": {
                "latitude": {
                  "description": "Latitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> latitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether North or South is determined by mark (+/-).<br/> + : North latitude<br/> - : South latitude",
                  "type": "number",
                  "example": 324000000,
                  "minimum": -324000000,
                  "maximum": 324000000
                },
                "longitude": {
                  "description": "Longitude of vehicle position information from GPS. (mas : milliarcseconds)<br/> <br/> longitude(ddd degree mm.mmmm minute)<br/> =>(ddd*60+mm.mmmm)*60*1000[mas]<br/> <br/> Information whether East or West is determined by mark (+/-).<br/> + : East longitude<br/> - : West longitude",
                  "type": "number",
                  "example": 648000000,
                  "minimum": -648000000,
                  "maximum": 648000000
                },
                "datum": {
                  "description": "- wgs84 : World Geodetic System (fixed)",
                  "type": "string",
                  "enum": [
                    "wgs84"
                  ],
                  "example": "wgs84"
                },
                "format": {
                  "description": "- mas : milliarcseconds (fixed)",
                  "type": "string",
                  "enum": [
                    "mas"
                  ],
                  "example": "mas"
                }
              }
            }
          }
        }
      }
    },
    "CommonScheduleRequest": {
      "description": "Schedule",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "- always: Active all time<br/> - time: Active on specific time",
          "type": "string",
          "example": "time",
          "enum": [
            "always",
            "time"
          ]
        },
        "timeSetting": {
          "description": "Mandatory when type is \"time\".",
          "type": "object",
          "required": [
            "activeDays",
            "duration"
          ],
          "properties": {
            "activeDays": {
              "description": "Specify at least one day of the week.<br/> - mon: Monday<br/> - tue: Tuesday<br/> - wed: Wednesday<br/> - thu: Thursday<br/> - fri: Friday<br/> - sat: Saturday<br/> - sun: Sunday",
              "type": "array",
              "maxItems": 7,
              "items": {
                "type": "string",
                "example": "mon",
                "enum": [
                  "mon",
                  "tue",
                  "wed",
                  "thu",
                  "fri",
                  "sat",
                  "sun"
                ]
              }
            },
            "duration": {
              "description": "Duration",
              "type": "object",
              "required": [
                "startTime",
                "endTime"
              ],
              "properties": {
                "startTime": {
                  "description": "HHMM [0000 - 2359]",
                  "type": "string",
                  "pattern": "^\\d{4}$",
                  "example": "0800"
                },
                "endTime": {
                  "description": "HHMM [0000 - 2359]",
                  "type": "string",
                  "pattern": "^\\d{4}$",
                  "example": "2000"
                }
              }
            }
          }
        },
        "expirationTime": {
          "description": "UTC Time, RFC3339 (YYYY-MM-DDTHH:MM:SS+00:00)<br/> Expiration date. If not specified, the default value is set in the server.",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "example": "2017-06-30T12:50:00+00:00"
        }
      }
    },
    "CommonScheduleResponse": {
      "description": "Schedule",
      "type": "object",
      "required": [
        "type",
        "expirationTime"
      ],
      "properties": {
        "type": {
          "description": "- always: Active all time<br/> - time: Active on specific time",
          "type": "string",
          "example": "time",
          "enum": [
            "always",
            "time"
          ]
        },
        "timeSetting": {
          "description": "Mandatory when type is \"time\".",
          "type": "object",
          "required": [
            "activeDays",
            "duration"
          ],
          "properties": {
            "activeDays": {
              "description": "Specify at least one day of the week.<br/> - mon: Monday<br/> - tue: Tuesday<br/> - wed: Wednesday<br/> - thu: Thursday<br/> - fri: Friday<br/> - sat: Saturday<br/> - sun: Sunday",
              "type": "array",
              "maxItems": 7,
              "items": {
                "type": "string",
                "example": "mon",
                "enum": [
                  "mon",
                  "tue",
                  "wed",
                  "thu",
                  "fri",
                  "sat",
                  "sun"
                ]
              }
            },
            "duration": {
              "description": "Duration",
              "type": "object",
              "required": [
                "startTime",
                "endTime"
              ],
              "properties": {
                "startTime": {
                  "description": "HHMM [0000 - 2359]",
                  "type": "string",
                  "pattern": "^\\d{4}$",
                  "example": "0800"
                },
                "endTime": {
                  "description": "HHMM [0000 - 2359]",
                  "type": "string",
                  "pattern": "^\\d{4}$",
                  "example": "2000"
                }
              }
            }
          }
        },
        "expirationTime": {
          "description": "UTC Time, RFC3339 (YYYY-MM-DDTHH:MM:SS+00:00)<br/> Expiration date.",
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+00:00$",
          "example": "2017-06-30T12:50:00+00:00"
        }
      }
    },
    "CommonSpeedSetup": {
      "description": "Mandatory when activationSetup is \"active\".",
      "type": "object",
      "required": [
        "threshold",
        "alertRunTimer",
        "reportAtIgnitionOff"
      ],
      "properties": {
        "threshold": {
          "description": "Threshold for violating speed.",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "speed of threshold.(kph) [2 - 249]",
              "type": "number",
              "example": 2,
              "minimum": 2,
              "maximum": 249
            },
            "unit": {
              "description": "- kph : kilometers per hour (fixed)",
              "type": "string",
              "example": "kph",
              "enum": [
                "kph"
              ]
            }
          }
        },
        "alertRunTimer": {
          "description": "Threshold for determination time for violating speed.",
          "type": "object",
          "required": [
            "value",
            "unit"
          ],
          "properties": {
            "value": {
              "description": "seconds of threshold. [1 - 600]",
              "type": "number",
              "example": 1,
              "minimum": 1,
              "maximum": 600
            },
            "unit": {
              "description": "- sec : second(fixed)",
              "type": "string",
              "example": "sec",
              "enum": [
                "sec"
              ]
            }
          }
        },
        "reportAtIgnitionOff": {
          "description": "Set the availability of Speed Alert Report transmission when Ignition OFF.<br/> - true : Transmit<br/> - false : Not transmit",
          "type": "boolean",
          "example": true,
          "enum": [
            true,
            false
          ]
        }
      }
    },
    "CommonRemoteEngineResultCode": {
      "description": "ResultCode:<br/> 0 : No freeze data<br/> 1 : vehicle speed is running or malfunction<br/> 2 : SSSW ON (without SMART authentication)<br/> 3 : Driver’s door open<br/> 4 : Passenger’s door open<br/> 5 : Driver side rear door open<br/> 6 : Passenger side rear door open<br/> 7 : Trunk (or Tail gate) (or Grass Hatch or Sub door)open<br/> 8 : Engine hood<br/> 9 : Silcon Unlock<br/> 10 : Smart FOB is in cabin<br/> 11 : C_IGKEYSW:1<br/> 12 : PARK SW = not P or AT position is beside P(Shift position FCAN data shows R, N, or D or S )<br/> 13 : P-PIN switch is on<br/> 14 : ENG_ACGL_SW is turned on<br/> 15 : ENG_ENG_FAILCODE_MIL_ON is turned on<br/> 16 : OILPRESSURE_LAMP_METER_ON is turned on<br/> 17 : BATT_PP_WARN_STATUS_IND is turned on<br/> 18 : ENG_ENG_COOLANT_TEMP is over threshold value<br/> 19 : ENG_AUTO_STARTER_INFO==1<br/> 20 : Judgment result of explosion is incomplete<br/> 21 : SNET collation error<br/> 22 : EXTRES collation error<br/> 23 : Other than LOCK request from SMARTFOB<br/> 24 : C_SCACTION=1 reception<br/> 25 : Stop command(C_RESSTOPREQ) reception<br/> 26 : Stop command (FOB) reception<br/> 27 : EXTRES frame is not reception (T_FSOUT of EXTRES is over )<br/> 28 : tRES timer expired<br/> 29 : RES SUCCESS COUNTER over the number of times of permission.<br/> 30 : C_SCSET1=0 and C_SCSET2=0<br/> 31 : EXTRES is not registration.<br/> 48 : OTHER error",
      "type": "number",
      "minimum": 0,
      "maximum": 48,
      "example": 0
    },
    "CommonErrorResponse": {
      "description": "Common Error for all services",
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "description": "Error Code",
          "type": "string",
          "example": "201",
          "minLength": 3,
          "maxLength": 3
        },
        "errorMessage": {
          "description": "Error Message",
          "type": "string",
          "example": "Invalid Data Length.",
          "maxLength": 128
        }
      }
    },
    "CommonErrorResponse16Gtc": {
      "description": "Error response",
      "type": "object",
      "required": [
        "apiName",
        "msg",
        "count",
        "resultList"
      ],
      "properties": {
        "apiName": {
          "description": "Api Name",
          "type": "string",
          "example": "string"
        },
        "msg": {
          "description": "Message",
          "type": "string",
          "example": "string"
        },
        "count": {
          "description": "count",
          "type": "string",
          "pattern": "\\d+",
          "example": "0"
        },
        "resultList": {
          "description": "Result List",
          "type": "array",
          "example": [],
          "items": {
            "type": "object"
          }
        }
      }
    }
  }
}
